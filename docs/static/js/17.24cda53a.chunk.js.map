{"version":3,"sources":["containers/DateConverter/styles.ts","containers/DateConverter/constants.ts","containers/DateConverter/index.tsx","hooks/useSyntaxHighlightTheme.ts"],"names":["StyledTableCell","withStyles","theme","body","fontSize","spacing","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","panel","marginTop","marginBottom","form","display","flexWrap","value","fontFamily","tableHeader","primary","main","timePickerField","marginLeft","marginRight","width","formatted","overflow","padding","SAMPLE_DATEFNS_TZ_CONVERT","SAMPLE_DATEFNS_FORMAT","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","withWidth","props","title","classes","syntaxTheme","useSyntaxHighlightTheme","useState","date","setDate","handleDateChange","getTime","useEffect","Date","Helmet","className","FeatureTitle","iconType","EventIcon","noValidate","utils","DateFnsUtils","Grid","container","justifyContent","Box","alignItems","TextField","autoFocus","isWidthUp","label","placeholder","type","variant","onChange","e","target","Button","color","onClick","format","KeyboardButtonProps","TableContainer","component","Paper","Table","size","TableHead","TableBody","scope","toISOString","CopyButton","data","toLocaleDateString","toLocaleTimeString","style","language","replace","getTimezoneOffset","toUTCString","usePreferenceTheme","isDark","dark","docco"],"mappings":"yaAEaA,EAAkBC,aAAW,SAACC,GAAD,MAAY,CAClDC,KAAM,CACFC,SAAUF,EAAMG,QAAQ,MACxBC,WAAY,SACZC,UAAW,iBAJYN,CAM3BO,KAESC,EAAiBR,aAAW,SAACC,GAAD,MAAY,CACjDQ,KAAM,CACF,sBAAuB,CACnBC,gBAAiBT,EAAMU,QAAQC,OAAOC,WAHpBb,CAM1Bc,KAESC,EAAYC,aAAW,SAACf,GAAD,MAAY,CAC5CQ,KAAM,CACFQ,OAAQhB,EAAMG,QAAQ,IAE1Bc,MAAO,CACHC,UAAWlB,EAAMG,QAAQ,GACzBgB,aAAcnB,EAAMG,QAAQ,IAEhCiB,KAAM,CACFC,QAAS,OACTC,SAAU,QAEdC,MAAO,CACHC,WAAY,aAEhBC,YAAa,CACThB,gBAAiBT,EAAMU,QAAQgB,QAAQC,MAE3CC,gBAAiB,CACbC,WAAY7B,EAAMG,QAAQ,GAC1B2B,YAAa9B,EAAMG,QAAQ,GAC3B4B,MAAO,KAEXC,UAAW,CACPD,MAAO,OACPE,SAAU,OACVC,QAAS,EACTlB,OAAQ,O,wDC7CHmB,EAAyB,oSASzBC,EAAqB,gM,0BCuN3B,SAASC,EAAgBC,GAC5B,MAAO,CACHC,UAAWD,EAAME,WAAN,gBAIZ,SAASC,EAAmBC,GAC/B,MAAO,CACHC,eAAgB,SAACC,EAAcrB,GAAf,OAAiCmB,EAASG,YAAcD,EAAMrB,MAIvEuB,sBAAQT,EAAiBI,EAAzBK,CAA6CC,eAhNrB,SAACC,GAAkB,IAAD,UAC/CC,EAAQ,eACRC,EAAUpC,IACVqC,EAAcC,cACZb,EAA8BS,EAA9BT,UAAWI,EAAmBK,EAAnBL,eAJkC,EAK7BU,mBAAsB,MALO,mBAK9CC,EAL8C,KAKxCC,EALwC,KAO/CC,EAAmB,SAACF,GACtBC,EAAQD,GACRX,EAAe,iBAAD,iBAAsBW,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAMG,aAS9C,OANAC,qBAAU,WACFnB,GACAgB,EAAQ,IAAII,MAAMpB,MAEvB,CAACA,IAGA,qCACI,cAACqB,EAAA,EAAD,CAAQX,MAAOA,IACf,sBAAKY,UAAWX,EAAQ1C,KAAxB,UACI,cAACsD,EAAA,EAAD,CAAcC,SAAUC,IAAWf,MAAOA,IAE1C,sBAAMY,UAAWX,EAAQ9B,KAAM6C,YAAU,EAAzC,SACI,cAAC,IAAD,CAAyBC,MAAOC,IAAhC,SACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAe,gBAA/B,UACI,eAACC,EAAA,EAAD,CAAKlD,QAAQ,OAAOmD,WAAW,SAA/B,UACI,cAACC,EAAA,EAAD,CACIC,UAAWC,YAAU,KAAM3B,EAAMjB,OACjC6C,MAAM,cACNC,YAAY,cACZC,KAAK,SACLC,QAAQ,WACR/D,OAAO,SACPO,MAAOgB,EACPyC,SAAU,SAACC,GAAD,OAAOtC,EAAe,iBAAkBsC,EAAEC,OAAO3D,UAE/D,cAAC4D,EAAA,EAAD,CACIJ,QAAQ,YACR9B,MAAM,gCACNmC,MAAM,UACNC,QAAS,kBAAM7B,EAAiB,IAAIG,OAJxC,SAMI,cAAC,IAAD,SAGR,gCACI,cAAC,IAAD,CACI3C,OAAO,SACP4D,MAAM,OACNU,OAAO,aACP/D,MAAO+B,EACP0B,SAAUxB,EACV+B,oBAAqB,CACjB,aAAc,iBAGtB,cAAC,IAAD,CACIvE,OAAO,SACP4D,MAAM,OACNrD,MAAO+B,EACP0B,SAAUxB,EACV+B,oBAAqB,CACjB,aAAc,2BAQtC,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAAO7B,UAAWX,EAAQjC,MAArD,SACI,eAAC0E,EAAA,EAAD,CAAOC,KAAMjB,YAAU,KAAM3B,EAAMjB,OAAS,SAAW,QAAvD,UACI,cAAC8D,EAAA,EAAD,CAAWhC,UAAWX,EAAQzB,YAA9B,SACI,eAACZ,EAAA,EAAD,WACI,cAACf,EAAD,0BACA,cAACA,EAAD,gEACA,cAACA,EAAD,SAGR,eAACgG,EAAA,EAAD,WACI,eAACvF,EAAD,WACI,cAACT,EAAD,CAAiB2F,UAAU,KAAKM,MAAM,MAAtC,+BAGA,cAACjG,EAAD,UACI,sBAAM+D,UAAWX,EAAQ3B,MAAzB,gBAAiC+B,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAM0C,kBAE3C,cAAClG,EAAD,UACI,cAACmG,EAAA,EAAD,CAAYC,KAAI,OAAE5C,QAAF,IAAEA,OAAF,EAAEA,EAAM0C,qBAGhC,eAACzF,EAAD,WACI,cAACT,EAAD,CAAiB2F,UAAU,KAAKM,MAAM,MAAtC,gCAGA,cAACjG,EAAD,UACI,uBAAM+D,UAAWX,EAAQ3B,MAAzB,iBACK+B,QADL,IACKA,OADL,EACKA,EAAM6C,qBADX,WACkC7C,QADlC,IACkCA,OADlC,EACkCA,EAAM8C,0BAG5C,cAACtG,EAAD,UACI,cAACmG,EAAA,EAAD,CAAYC,MAAU,OAAJ5C,QAAI,IAAJA,OAAA,EAAAA,EAAM6C,sBAAuB,KAA7B,OAAmC7C,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAM8C,6BAGnE,eAAC7F,EAAD,WACI,cAACT,EAAD,CAAiB2F,UAAU,KAAKM,MAAM,MAAtC,iCAGA,cAACjG,EAAD,UACI,uBAAM+D,UAAWX,EAAQ3B,MAAzB,iCAAqDgB,EAArD,UAEJ,cAACzC,EAAD,UACI,cAACmG,EAAA,EAAD,CAAYC,KAAI,8BAAyB3D,EAAzB,aAGxB,eAAChC,EAAD,WACI,cAACT,EAAD,CAAiB2F,UAAU,KAAKM,MAAM,MAAtC,oCAGA,cAACjG,EAAD,UACI,uBAAM+D,UAAWX,EAAQ3B,MAAzB,yCAAsD+B,QAAtD,IAAsDA,OAAtD,EAAsDA,EAAM0C,cAA5D,WAEJ,cAAClG,EAAD,UACI,cAACmG,EAAA,EAAD,CAAYC,KAAI,8BAAyB3D,EAAzB,aAGxB,eAAChC,EAAD,WACI,cAACT,EAAD,CAAiB2F,UAAU,KAAKM,MAAM,MAAtC,kDAGA,cAACjG,EAAD,UACI,cAAC,IAAD,CACIuG,MAAOlD,EACPmD,SAAS,aACTzC,UAAWX,EAAQlB,UAHvB,SAKKG,EAA0BoE,QAAQ,cAAlC,iBAAiDjD,QAAjD,IAAiDA,OAAjD,EAAiDA,EAAM0C,qBAAvD,QAAwE,QAGjF,cAAClG,EAAD,UACI,cAACmG,EAAA,EAAD,CACIC,KAAM/D,EAA0BoE,QAC5B,cADE,iBAEFjD,QAFE,IAEFA,OAFE,EAEFA,EAAM0C,qBAFJ,QAEqB,WAKvC,eAACzF,EAAD,WACI,cAACT,EAAD,CAAiB2F,UAAU,KAAKM,MAAM,MAAtC,6BAGA,eAACjG,EAAD,kBACKwD,QADL,IACKA,OADL,EACKA,EAAMkD,oBADX,UACsC,iBAAClD,QAAD,IAACA,OAAD,EAACA,EAAMkD,2BAAP,QAA8B,GAAK,GADzE,WAGA,cAAC1G,EAAD,OAEJ,eAACS,EAAD,WACI,cAACT,EAAD,CAAiB2F,UAAU,KAAKM,MAAM,MAAtC,qCAGA,cAACjG,EAAD,UACI,cAAC,IAAD,CACIuG,MAAOlD,EACPmD,SAAS,aACTzC,UAAWX,EAAQlB,UAHvB,SAKKI,EAAsBmE,QAAQ,cAA9B,iBAA6CjD,QAA7C,IAA6CA,OAA7C,EAA6CA,EAAM0C,qBAAnD,QAAoE,QAG7E,cAAClG,EAAD,UACI,cAACmG,EAAA,EAAD,CACIC,KAAM9D,EAAsBmE,QACxB,cADE,iBAEFjD,QAFE,IAEFA,OAFE,EAEFA,EAAM0C,qBAFJ,QAEqB,WAKvC,eAACzF,EAAD,WACI,cAACT,EAAD,CAAiB2F,UAAU,KAAKM,MAAM,MAAtC,wBAGA,cAACjG,EAAD,iBAAkBwD,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAMmD,gBACxB,cAAC3G,EAAD,0B,iCCtNhC,mEAGasD,EAA0B,WAGrC,OAFmBsD,cAAXC,OAEQC,IAAOC","file":"static/js/17.24cda53a.chunk.js","sourcesContent":["import { makeStyles, TableCell, TableRow, withStyles } from '@material-ui/core';\n\nexport const StyledTableCell = withStyles((theme) => ({\n    body: {\n        fontSize: theme.spacing(1.75),\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    panel: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n    },\n    form: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    value: {\n        fontFamily: 'monospace',\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    timePickerField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 260,\n    },\n    formatted: {\n        width: '100%',\n        overflow: 'auto',\n        padding: 0,\n        margin: 0,\n    },\n}));\n","export const SAMPLE_DATEFNS_TZ_CONVERT = `import { utcToZonedTime } from 'date-fns-tz';\n\n// Obtain a Date instance that will render the\n// equivalent Berlin time for the UTC date\nconst utcValue = '#utc_value#';\nconst date = new Date(utcValue);\nconst timezone = 'Europe/Berlin';\nconst result = utcToZonedTime(date, timezone);`;\n\nexport const SAMPLE_DATEFNS_FORMAT = `import { format } from \"date-fns\";\n\nconst utcValue = '#utc_value#';\nconst date = new Date(utcValue);\nconst format = 'yyyy-MM-dd-HH-mm-ss';\nconst formattedDate = format(date, format);`\n","import { Box, Button, Paper, Table, TableBody, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport TextField from '@material-ui/core/TextField';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport EventIcon from '@material-ui/icons/Event';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { setTextAction } from '../../actions/text-actions';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport CopyButton from '../../components/CopyButton';\nimport { SAMPLE_DATEFNS_FORMAT, SAMPLE_DATEFNS_TZ_CONVERT } from './constants';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { useSyntaxHighlightTheme } from '../../hooks/useSyntaxHighlightTheme';\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst DateConverter: React.FC<Props> = (props: Props) => {\n    const title = 'Date & Epoch';\n    const classes = useStyles();\n    const syntaxTheme = useSyntaxHighlightTheme();\n    const { inputText, storeInputText } = props;\n    const [date, setDate] = useState<Date | null>(null);\n\n    const handleDateChange = (date: Date | null) => {\n        setDate(date);\n        storeInputText('lastEpochValue', `${date?.getTime()}`);\n    };\n\n    useEffect(() => {\n        if (inputText) {\n            setDate(new Date(+inputText));\n        }\n    }, [inputText]);\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={EventIcon} title={title} />\n\n                <form className={classes.form} noValidate>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <Grid container justifyContent='space-between'>\n                            <Box display='flex' alignItems='center'>\n                                <TextField\n                                    autoFocus={isWidthUp('md', props.width)}\n                                    label='Epoch value'\n                                    placeholder='Epoch value'\n                                    type='number'\n                                    variant='outlined'\n                                    margin='normal'\n                                    value={inputText}\n                                    onChange={(e) => storeInputText('lastEpochValue', e.target.value)}\n                                />\n                                <Button\n                                    variant='contained'\n                                    title=\"Update value with 'Now' value\"\n                                    color='primary'\n                                    onClick={() => handleDateChange(new Date())}\n                                >\n                                    <TimerIcon />\n                                </Button>\n                            </Box>\n                            <div>\n                                <KeyboardDatePicker\n                                    margin='normal'\n                                    label='Date'\n                                    format='yyyy-MM-dd'\n                                    value={date}\n                                    onChange={handleDateChange}\n                                    KeyboardButtonProps={{\n                                        'aria-label': 'change date',\n                                    }}\n                                />\n                                <KeyboardTimePicker\n                                    margin='normal'\n                                    label='Time'\n                                    value={date}\n                                    onChange={handleDateChange}\n                                    KeyboardButtonProps={{\n                                        'aria-label': 'change time',\n                                    }}\n                                />\n                            </div>\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                </form>\n\n                <TableContainer component={Paper} className={classes.panel}>\n                    <Table size={isWidthUp('md', props.width) ? 'medium' : 'small'}>\n                        <TableHead className={classes.tableHeader}>\n                            <TableRow>\n                                <StyledTableCell>Description</StyledTableCell>\n                                <StyledTableCell>Value and js code examples using date-fns library</StyledTableCell>\n                                <StyledTableCell></StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    ISO string / JSON\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <span className={classes.value}>{date?.toISOString()}</span>\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <CopyButton data={date?.toISOString()} />\n                                </StyledTableCell>\n                            </StyledTableRow>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    Locale date string\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <span className={classes.value}>\n                                        {date?.toLocaleDateString()} {date?.toLocaleTimeString()}\n                                    </span>\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <CopyButton data={date?.toLocaleDateString() + ' ' + date?.toLocaleTimeString()} />\n                                </StyledTableCell>\n                            </StyledTableRow>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    Js code using epoch\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <span className={classes.value}>const dt = new Date({inputText});</span>\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <CopyButton data={`const dt = new Date(${inputText});`} />\n                                </StyledTableCell>\n                            </StyledTableRow>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    Js code using ISO 8601\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <span className={classes.value}>const dt = new Date('{date?.toISOString()}');</span>\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <CopyButton data={`const dt = new Date(${inputText});`} />\n                                </StyledTableCell>\n                            </StyledTableRow>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    date-fns timezone convertion example\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <SyntaxHighlighter\n                                        style={syntaxTheme}\n                                        language='javascript'\n                                        className={classes.formatted}\n                                    >\n                                        {SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')}\n                                    </SyntaxHighlighter>\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <CopyButton\n                                        data={SAMPLE_DATEFNS_TZ_CONVERT.replace(\n                                            '#utc_value#',\n                                            date?.toISOString() ?? ''\n                                        )}\n                                    />\n                                </StyledTableCell>\n                            </StyledTableRow>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    Timezone offset\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    {date?.getTimezoneOffset()} min ({(date?.getTimezoneOffset() ?? 0) / 60} hrs)\n                                </StyledTableCell>\n                                <StyledTableCell></StyledTableCell>\n                            </StyledTableRow>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    date-fns format example\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <SyntaxHighlighter\n                                        style={syntaxTheme}\n                                        language='javascript'\n                                        className={classes.formatted}\n                                    >\n                                        {SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')}\n                                    </SyntaxHighlighter>\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <CopyButton\n                                        data={SAMPLE_DATEFNS_FORMAT.replace(\n                                            '#utc_value#',\n                                            date?.toISOString() ?? ''\n                                        )}\n                                    />\n                                </StyledTableCell>\n                            </StyledTableRow>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    UTC string\n                                </StyledTableCell>\n                                <StyledTableCell>{date?.toUTCString()}</StyledTableCell>\n                                <StyledTableCell></StyledTableCell>\n                            </StyledTableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastEpochValue'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(DateConverter));\n","import { usePreferenceTheme } from \"../components/Preferences/PreferencesProvider\";\nimport { docco, dark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nexport const useSyntaxHighlightTheme = () => {\n  const { isDark } = usePreferenceTheme();\n\n  return isDark ? dark : docco;\n};\n"],"sourceRoot":""}