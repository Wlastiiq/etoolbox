{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_createClass","protoProps","staticProps","prototype","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","s","n","e","_e","f","normalCompletion","didErr","step","next","_e2","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","obj","path","defaultValue","isObject","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","keys","formStateData","omit","isEmptyObject","find","window","HTMLElement","document","isWeb","useController","rules","control","shouldUnregister","methods","defaultValuesRef","register","fieldsRef","unregister","namesRef","subjectsRef","shouldUnmount","inFieldArrayActionRef","field","_f","setInputStateValue","onChange","onBlur","ref","formStateRef","nameRef","updateFormState","readFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","formStateSubscription","state","subscribe","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useFormState","controllerSubscription","values","_c","shouldUnmountField","array","mount","event","isCheckBoxInput","checked","getControllerValue","elm","fieldState","invalid","isTouched","Controller","render","validateAllFieldCriteria","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","focus","refs","getFieldsValues","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","fieldsRefs","criteriaMode","shouldUseNativeValidation","mounted","required","min","max","maxLength","minLength","pattern","validate","isOnBlur","isOnChange","isOnTouch","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","validationData","isRegex","a","inputValue","inputRef","setCustomValidty","reportValidity","setCustomValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","mode","isOnSubmit","tearDowns","tearDown","push","teardown","observer","subscription","closed","add","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","submitCount","isSubmitting","isSubmitSuccessful","resolverRef","fieldArrayDefaultValuesRef","contextRef","isMountedRef","watch","Set","unMount","watchAll","validationMode","getValidationModes","isValidateAllFieldCriteria","isFieldWatched","has","shouldRenderBaseOnError","shouldSkipRender","inputState","isValidFromResolver","isWatched","previousError","validateForm","updatedFormState","setFieldValue","rawValue","shouldRender","shouldRegister","isHTMLElement","forEach","radioRef","selectRef","checkboxRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","getIsDirty","formValues","isCurrentTouched","isChanged","previousIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeInlineValidation","skipReRender","validateField","executeResolverValidation","shouldCheckValid","valid","fieldError","fieldNames","schemaResult","all","fieldName","shouldFocus","updateIsValid","updateIsValidAndInputValue","isValueUndefined","defaultChecked","setInternalValues","entries","fieldKey","fieldValue","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","getValues","handleChange","inputType","shouldSkipValidation","hasValidation","skipValidation","parentNodeName","currentError","clearErrors","inputName","setError","watchInternal","isGlobal","isArrayNames","fieldValues","delete","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","isRadioOrCheckboxFunction","contains","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","registerAbsentFields","reset","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","useFieldArraySubscription","unregisterFieldNames","isLiveInDom"],"mappings":"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","file":"static/js/2.dc7ae2f8.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    field && field._f && !isUndefined(field._f.value)\n      ? field._f.value\n      : isUndefined(get(defaultValuesRef.current, name))\n      ? defaultValue\n      : get(defaultValuesRef.current, name),\n  );\n  const { onChange, onBlur, ref } = register(name, {\n    ...rules,\n    value,\n  });\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    const field = get(fieldsRef.current, name);\n\n    if (field && field._f) {\n      field._f._c = true;\n    }\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isNameInFieldArray(namesRef.current.array, name)\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else {\n        const field = get(fieldsRef.current, name);\n\n        if (field && field._f) {\n          field._f.mount = false;\n        }\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, subjectsRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isDateObject from './utils/isDateObject';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      inputState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      error\n        ? set(formStateRef.current.errors, name, error)\n        : unset(formStateRef.current.errors, name);\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(inputState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...inputState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref) && !_f._c) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value) && !_f._c) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs && !_f._c) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender && _f._c) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n            shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName, {})._f)\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          name ? fieldNames : namesRef.current.mount,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (name: InternalFieldName, ref?: Ref) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? isUndefined(get(fieldArrayDefaultValuesRef.current, name))\n          ? get(defaultValuesRef.current, name)\n          : get(fieldArrayDefaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                  shouldUseNativeValidation,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      isValid !== formStateRef.current.isValid &&\n        subjectsRef.current.state.next({\n          isValid,\n        });\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n        const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        (isFieldArray || !isPrimitive(fieldValue) || (field && !field._f)) &&\n        !isDateObject(fieldValue)\n          ? setInternalValues(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const inputState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...inputState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        if (resolver) {\n          const { errors } = await resolverRef.current!(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            getResolverOptions(\n              [name],\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n        } else {\n          error = (\n            await validateField(\n              field,\n              isValidateAllFieldCriteria,\n              shouldUseNativeValidation,\n            )\n          )[name];\n        }\n\n        !isBlurEvent &&\n          subjectsRef.current.watch.next({\n            name,\n            type,\n            values: getValues(),\n          });\n        shouldRenderBaseOnError(\n          false,\n          name,\n          error,\n          inputState,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      values: getValues(),\n    });\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [\n      shouldFocusError,\n      isValidateAllFieldCriteria,\n      criteriaMode,\n      shouldUseNativeValidation,\n    ],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? defaultValuesRef.current\n          : { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const unregisterFieldNames = [];\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregisterFieldNames.push(name);\n    }\n\n    unregisterFieldNames.length &&\n      unregister(unregisterFieldNames as FieldPath<TFieldValues>[]);\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n"],"sourceRoot":""}