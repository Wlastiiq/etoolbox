{"version":3,"sources":["containers/RegExTester/services.ts","containers/RegExTester/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx"],"names":["replacer","match","capture","useStyles","makeStyles","theme","root","margin","spacing","matches","padding","border","backgroundColor","fontWeight","toolbar","marginLeft","mapStateToProps","state","regularExpression","textInputs","inputText","mapDispatchToProps","dispatch","storeInputText","name","value","setTextAction","connect","withWidth","props","title","classes","React","useState","highlithedMatches","setHighlithedMatches","extracted","setExtracted","debounced","useDebouncedCallback","text","replaceAll","regex","regexParser","global","replace","e","toString","services","extratedItemsList","result","exec","push","set","Set","console","log","size","sort","join","useEffect","callback","Helmet","className","FeatureTitle","iconType","TextRotationNoneIcon","TextField","autoFocus","isWidthUp","width","id","label","placeholder","variant","fullWidth","onChange","target","Toolbar","Box","display","flexGrow","CopyButton","data","multiline","rows","ReactHtmlParser","wordBreak","titleWithIcon","alignItems","titleContainer","justifyContent","icon","height","marginRight","FeatureIcon","setToasterState","useToasterUpdate","endIcon","onClick","feedback","substr","message","copy","format","open","type","autoHideDuration","disabled","color"],"mappings":"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","file":"static/js/24.b93b3040.chunk.js","sourcesContent":["import regexParser from 'regex-parser';\n\nexport function transform(regularExpression: string | undefined, inputText: string | undefined): string {\n    if (!regularExpression || !inputText) {\n        return '';\n    }\n\n    const text = inputText.replaceAll('\\n', '<br />')\n\n    try {\n        const regex = regexParser(regularExpression);\n        if (regex.global) {\n            return text.replaceAll(regex, replacer);\n        } else {\n            return text.replace(regex, replacer);\n        }\n    } catch (e) {\n        return e.toString();\n    }\n}\n\nexport function extract(regularExpression: string | undefined, inputText: string | undefined): string {\n    const extratedItemsList = [];\n\n    if (!regularExpression || !inputText) {\n        return '';\n    }\n\n    try {\n        const regex = regexParser(regularExpression);\n        if (!regex.global) {\n            return '';\n        }\n\n        let result;\n        while ((result = regex.exec(inputText)) !== null) {\n            extratedItemsList.push(result[0]);\n        }\n\n        // Log some stats\n        const set = new Set(extratedItemsList);\n        console.log(`Sorted set of unique ${set.size} entries:`, [...set].sort().join(', '));\n\n        return extratedItemsList.join(', ');\n    } catch (e) {\n        return e.toString();\n    }\n}\n\nfunction replacer(match: string, capture: string): string {\n    // console.log(`match: ${match}, at position ${capture}`);\n    return `<span>${match}</span>`;\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { Box, Toolbar } from '@material-ui/core';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextRotationNoneIcon from '@material-ui/icons/TextRotationNone';\nimport TextField from '@material-ui/core/TextField';\nimport ReactHtmlParser from 'react-html-parser';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    matches: {\n        padding: theme.spacing(1),\n        border: '1px solid grey',\n        '& span': {\n            backgroundColor: 'yellow',\n            fontWeight: 'bold',\n        }\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n}));\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    regularExpression?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst RegExTester: React.FC<Props> = (props: Props) => {\n    const title = 'Regular expressions tester';\n    const classes = useStyles();\n    const { regularExpression, inputText, storeInputText } = props;\n    const [highlithedMatches, setHighlithedMatches] = React.useState('');\n    const [extracted, setExtracted] = React.useState('');\n\n    // https://www.npmjs.com/package/use-debounce\n    const debounced = useDebouncedCallback(\n        (regularExpression, inputText) => {\n            setHighlithedMatches(services.transform(regularExpression, inputText));\n            setExtracted(services.extract(regularExpression, inputText));\n        },\n        300\n    );\n\n    React.useEffect(\n        // https://www.npmjs.com/package/use-debounce\n        () => debounced.callback(regularExpression, inputText),\n        [regularExpression, inputText, debounced]\n    );\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={TextRotationNoneIcon} title={title} />\n\n                <TextField\n                    autoFocus={isWidthUp('md', props.width)}\n                    id=\"regex\"\n                    label=\"Regular expression\"\n                    placeholder=\"Type the regular expression. Example: /example/g\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth={true}\n                    value={regularExpression}\n                    onChange={(e) => storeInputText('lastRegEx', e.target.value)}\n                />\n\n                <Toolbar className={classes.toolbar}>\n                    <Box display='flex' flexGrow={1}></Box>\n                    <CopyButton data={regularExpression} />\n                </Toolbar>\n\n                <TextField\n                    id=\"content\"\n                    label=\"Content to test the regular expression against\"\n                    placeholder=\"Paste or type the content here\"\n                    multiline\n                    rows={6}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth={true}\n                    value={inputText}\n                    onChange={(e) => storeInputText('lastRegExTextSample', e.target.value)}\n                />\n\n                <div className={classes.matches}>\n                    {ReactHtmlParser(highlithedMatches)}\n                </div>\n\n                <p>\n                    Collection of values. Could be usefull for Jira tickets numbers with expressions like:<br />\n                    <strong>issueKey in (FS-3456, WS-3213, FS-9988)</strong>\n                </p>\n                <div className={classes.matches}>\n                    {extracted}\n                </div>\n                <Toolbar className={classes.toolbar}>\n                    <Box display='flex' flexGrow={1}></Box>\n                    <CopyButton data={extracted} />\n                </Toolbar>\n\n            </div>\n        </>\n    );\n}\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        regularExpression: state.textInputs['lastRegEx'],\n        inputText: state.textInputs['lastRegExTextSample'],\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(RegExTester));\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n}\n\nexport default FeatureTitle;\n","import React from 'react';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport { Button } from '@material-ui/core';\n\nimport * as copy from 'copy-to-clipboard';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n}\n\nconst CopyButton: React.FC<Props> = (props: Props) => {\n    const { data } = props;\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const feedback = data.substr(0, 20);\n        const message = `Content copied into clipboard: ${feedback} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    }\n\n    return (\n        <Button endIcon={<AssignmentTurnedIn>Copy</AssignmentTurnedIn>}\n            onClick={handleCopy} disabled={!data}\n            variant=\"contained\" color=\"primary\">Copy</Button>\n    );\n}\n\nexport default CopyButton;\n"],"sourceRoot":""}