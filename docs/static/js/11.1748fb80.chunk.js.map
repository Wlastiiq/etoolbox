{"version":3,"sources":["services/string-utils.ts","containers/JSONConverter/services.ts","containers/JSONConverter/index.tsx","hooks/useSyntaxHighlightTheme.ts"],"names":["isBlank","str","trim","length","quicktypeJSON","targetLanguage","typeName","jsonString","a","jsonInput","jsonInputForTargetLanguage","addSource","name","samples","inputData","InputData","addInput","quicktype","lang","rendererOptions","isValid","data","StringUtils","source","sourceType","rootClassName","transform","transformJSON","transformJsObject","fn","Function","result","jsonData","JSON","stringify","newData","toString","lines","join","useStyles","makeStyles","theme","root","margin","spacing","form","marginTop","formControl","converterOptions","width","encodedResult","padding","borderColor","palette","text","disabled","borderStyle","borderWidth","borderRadius","shape","whiteSpace","wordBreak","toolbar","marginLeft","mapStateToProps","state","inputText","textInputs","optionSource","optionTarget","optionRootClassname","mapDispatchToProps","dispatch","storeInputText","value","setTextAction","connect","withWidth","props","title","classes","syntaxTheme","useSyntaxHighlightTheme","React","useState","transformed","setTransformed","defaultValues","useForm","handleSubmit","control","getValues","onSubmit","console","log","services","useEffect","Helmet","className","FeatureTitle","iconType","DeveloperModeIcon","Grid","container","item","FormControl","InputLabel","id","render","field","onChange","Select","labelId","e","target","MenuItem","FormHelperText","invalid","fieldState","TextField","label","error","type","helperText","rules","required","fullWidth","autoFocus","isWidthUp","placeholder","multiline","rows","variant","Toolbar","Box","display","flexGrow","CopyButton","Button","color","endIcon","onClick","style","language","usePreferenceTheme","isDark","dark","docco"],"mappings":"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","file":"static/js/11.1748fb80.chunk.js","sourcesContent":["\nexport function isBlank(str: string | undefined | null) {\n    if (!str || str.trim().length === 0) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isNotBlank(str: string | undefined | null) {\n    return !isBlank(str);\n}\n","import { quicktype, InputData, jsonInputForTargetLanguage } from 'quicktype-core';\nimport * as StringUtils from '../../services/string-utils';\n\nexport interface ConvertionContext {\n    source: string;\n    sourceType: string;\n    targetLanguage: string;\n    rootClassName: string;\n}\n\nasync function quicktypeJSON(targetLanguage: string, typeName: string, jsonString: string) {\n    // We could add multiple samples for the same desired\n    // type, or many sources for other types. Here we're\n    // just making one type from one piece of sample JSON.\n    const jsonInput = jsonInputForTargetLanguage(targetLanguage);\n    await jsonInput.addSource({ name: typeName, samples: [jsonString] });\n\n    const inputData = new InputData();\n    inputData.addInput(jsonInput);\n\n    return await quicktype({\n        inputData,\n        lang: targetLanguage,\n        rendererOptions: {\n            'just-types': 'true',\n            'acronym-style': 'original',\n            'lombok': 'true',\n        },\n    });\n}\n\nfunction isValid(data: ConvertionContext) {\n    if (StringUtils.isBlank(data.source)) {\n        return false;\n    }\n    if (StringUtils.isBlank(data.sourceType)) {\n        return false;\n    }\n    if (StringUtils.isBlank(data.rootClassName)) {\n        return false;\n    }\n    if (StringUtils.isBlank(data.targetLanguage)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport async function transform(data: ConvertionContext): Promise<string> {\n    if (!isValid(data)) {\n        return '';\n    }\n\n    if (data.sourceType === data.targetLanguage) {\n        return data.source;\n    }\n\n    switch (data.sourceType) {\n        case 'json':\n            return transformJSON(data);\n\n        case 'jsObject':\n            return transformJsObject(data);\n\n        default:\n            return data.source;\n    }\n}\n\nasync function transformJsObject(data: ConvertionContext): Promise<string> {\n    try {\n        // eslint-disable-next-line no-new-func\n        const fn = new Function(`return ${data.source}`);\n        const result = fn();\n        const jsonData = JSON.stringify(result, null, 4);\n        const newData: ConvertionContext = { ...data, sourceType: 'json', source: jsonData };\n        return transform(newData);\n    } catch (e) {\n        return e.toString();\n    }\n}\n\nasync function transformJSON(data: ConvertionContext): Promise<string> {\n    try {\n        const { lines } = await quicktypeJSON(data.targetLanguage, data.rootClassName, data.source);\n        return lines.join('\\n');\n    } catch (e) {\n        return e.toString();\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinkIcon from '@material-ui/icons/Link';\nimport DeveloperModeIcon from '@material-ui/icons/DeveloperMode';\nimport TextField from '@material-ui/core/TextField';\n\nimport SyntaxHighlighter from 'react-syntax-highlighter';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\nimport { Box, FormControl, FormHelperText, Grid, InputLabel, MenuItem, Select, Toolbar } from '@material-ui/core';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useSyntaxHighlightTheme } from '../../hooks/useSyntaxHighlightTheme';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    form: {\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(0),\n    },\n    converterOptions: {\n        width: '100%',\n    },\n    encodedResult: {\n        padding: theme.spacing(1),\n        borderColor: theme.palette.text.disabled,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        borderRadius: theme.shape.borderRadius,\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n}));\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    optionSource?: string;\n    optionTarget?: string;\n    optionRootClassname?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst JSONConverter: React.FC<Props> = (props: Props) => {\n    const title = 'JSON Converter';\n    const classes = useStyles();\n    const syntaxTheme = useSyntaxHighlightTheme();\n    const { inputText, optionSource, optionTarget, optionRootClassname, storeInputText } = props;\n    const [transformed, setTransformed] = React.useState('');\n    const defaultValues = {\n        source: inputText,\n        sourceType: optionSource,\n        targetLanguage: optionTarget,\n        rootClassName: optionRootClassname,\n    };\n    const { handleSubmit, control, getValues } = useForm({ defaultValues });\n    const onSubmit = async (data: services.ConvertionContext) => {\n        console.log(data);\n        const result = await services.transform(data);\n        setTransformed(result);\n    };\n\n    React.useEffect(() => {\n        const data = getValues();\n        storeInputText('lastJSON2ConvertOptionSource', data.sourceType!);\n        storeInputText('lastJSON2ConvertOptionTarget', data.targetLanguage!);\n        storeInputText('lastJSON2ConvertOptionRootClassname', data.rootClassName!);\n        storeInputText('lastJSON2Convert', data.source!);\n    }, [storeInputText, getValues, transformed]);\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={DeveloperModeIcon} title={title} />\n\n                <div className={classes.form}>\n                    <Grid container spacing={3} className={classes.converterOptions}>\n                        <Grid item>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel id=\"sourceType\">Source type</InputLabel>\n                                <Controller\n                                    control={control}\n                                    name=\"sourceType\"\n                                    render={({field: { value, name, onChange }}) => (\n                                        <Select name={name} labelId=\"sourceType\" value={value} onChange={e => onChange(e.target.value)}>\n                                            <MenuItem value=\"json\">JSON</MenuItem>\n                                            <MenuItem value=\"jsObject\">Javascript</MenuItem>\n                                        </Select>\n                                    )}\n                                />\n                                <FormHelperText>Input format or language</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel id=\"targetLanguage\">Target language</InputLabel>\n                                <Controller\n                                    control={control}\n                                    name=\"targetLanguage\"\n                                    render={({field: { value, name, onChange }}) => (\n                                        <Select name={name} labelId=\"targetLanguage\" value={value} onChange={e => onChange(e.target.value)}>\n                                            <MenuItem value=\"csharp\">C#</MenuItem>\n                                            <MenuItem value=\"cpp\">C++</MenuItem>\n                                            <MenuItem value=\"dart\">Dart</MenuItem>\n                                            <MenuItem value=\"elm\">Elm</MenuItem>\n                                            <MenuItem value=\"flow\">Flow</MenuItem>\n                                            <MenuItem value=\"go\">Go</MenuItem>\n                                            <MenuItem value=\"haskell\">Haskell</MenuItem>\n                                            <MenuItem value=\"java\">Java</MenuItem>\n                                            <MenuItem value=\"json-schema\">JSON Schema</MenuItem>\n                                            <MenuItem value=\"kotlin\">Kotlin</MenuItem>\n                                            <MenuItem value=\"objectivec\">ObjectiveC</MenuItem>\n                                            <MenuItem value=\"pike\">Pike</MenuItem>\n                                            <MenuItem value=\"python\">Python</MenuItem>\n                                            <MenuItem value=\"rust\">Rust</MenuItem>\n                                            <MenuItem value=\"swift\">Swift</MenuItem>\n                                            <MenuItem value=\"typescript\">TypeScript</MenuItem>\n                                            <MenuItem value=\"json\">JSON</MenuItem>\n                                        </Select>\n                                    )}\n                                />\n                                <FormHelperText>The target language of the convertion</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item>\n                            <FormControl className={classes.formControl}>\n                                <Controller\n                                    name=\"rootClassName\"\n                                    render={({\n                                        field: { name, value, onChange },\n                                        fieldState: { invalid },\n                                    }) => (\n                                        <TextField name={name} value={value} onChange={e => onChange(e.target.value)} label=\"Root class name\" \n                                            error={invalid} type=\"text\" helperText={invalid ? 'field is required' : null} />\n                                    )}\n                                    control={control}\n                                    rules={{\n                                        required: true,\n                                    }}\n                                />\n                                <FormHelperText>Name of the parent class</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                    <FormControl className={classes.formControl} fullWidth={true}>\n                        <Controller\n                            name=\"source\"\n                            control={control}\n                            render={({\n                                field: { value, name, onChange },\n                                fieldState: { invalid },\n                            }) => (\n                                <TextField\n                                    name={name}\n                                    onChange={e => onChange(e.target.value)}\n                                    value={value}\n                                    autoFocus={isWidthUp('md', props.width)}\n                                    label=\"Source data\"\n                                    placeholder=\"Paste or type the source data here\"\n                                    multiline\n                                    rows={4}\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    error={invalid}\n                                    helperText={invalid ? 'field is required' : null}\n                                />\n                            )}\n                            rules={{\n                                required: true,\n                            }}\n                        />\n                        <FormHelperText>Data to convert into the target language</FormHelperText>\n                    </FormControl>\n\n                </div>\n\n                <Toolbar className={classes.toolbar}>\n                    <Box display='flex' flexGrow={1}></Box>\n                    <CopyButton data={transformed} />\n                    <Button variant=\"contained\" color=\"primary\" endIcon={<LinkIcon>Encode</LinkIcon>}\n                        onClick={handleSubmit(onSubmit)}>Enc.</Button>\n                </Toolbar>\n\n                <SyntaxHighlighter style={syntaxTheme} language={getValues().targetLanguage} className={classes.encodedResult}>\n                    {transformed}\n                </SyntaxHighlighter>\n            </div>\n        </>\n    );\n}\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastJSON2Convert'],\n        optionSource: state.textInputs['lastJSON2ConvertOptionSource'],\n        optionTarget: state.textInputs['lastJSON2ConvertOptionTarget'],\n        optionRootClassname: state.textInputs['lastJSON2ConvertOptionRootClassname'],\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(JSONConverter));\n","import { usePreferenceTheme } from \"../components/Preferences/PreferencesProvider\";\nimport { docco, dark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nexport const useSyntaxHighlightTheme = () => {\n  const { isDark } = usePreferenceTheme();\n\n  return isDark ? dark : docco;\n};\n"],"sourceRoot":""}