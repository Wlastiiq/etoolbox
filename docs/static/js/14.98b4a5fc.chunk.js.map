{"version":3,"sources":["containers/ImageOCR/styled.ts","containers/ImageOCR/index.tsx","containers/ImageOCR/services.ts"],"names":["imageResizer","marginTop","display","alignItems","justifyContent","border","useStyles","makeStyles","theme","root","margin","spacing","form","formControl","minWidth","image","width","imageSelector","textAlign","toolbar","padding","marginLeft","formatted","wordWrap","height","INITIAL_WORKER_STATUS","workerId","jobId","status","progress","withWidth","props","title","classes","setToasterState","useToasterUpdate","React","useState","language","setLanguage","workerStatus","setWorkerStatus","imgDataURL","setImgDataURL","imgExtractedText","setImgExtractedText","logger","onPasteFromClipboard","e","clipboardData","originalEvent","clipboard","services","items","ev","target","result","useEffect","document","onpaste","removeEventListener","className","iconType","TextFieldsIcon","noValidate","autoComplete","shrink","id","labelId","value","autoFocus","isWidthUp","onChange","type","color","accept","file","reader","FileReader","onload","readAsDataURL","onFileSelected","files","style","htmlFor","variant","component","defaultSize","src","alt","endIcon","onClick","event","preventDefault","active","startsWith","label","fullWidth","multiline","rows","flexGrow","data","imageBuffer","Buffer","from","split","then","open","message","autoHideDuration","disabled","clipboardToDataURL","onLoad","i","length","item","getAsFile","processOCR","onCompleted","a","worker","createWorker","load","loadLanguage","initialize","recognize","text","terminate"],"mappings":"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","file":"static/js/14.98b4a5fc.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core';\n\nexport const imageResizer = {\n    marginTop: 10,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 'solid 1px blue'\n};\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    form: {\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    image: {\n        width: '100%',\n    },\n    imageSelector: {\n        margin: theme.spacing(2),\n        textAlign: 'center',\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    formatted: {\n        padding: theme.spacing(1),\n        border: '1px solid grey',\n        wordWrap: 'break-word',\n        height: 116,\n    },\n}));\n","import React from 'react';\n\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport { Box, Card, CardContent, FormControl, InputLabel, LinearProgress, MenuItem, Select, TextField, Toolbar, Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport PhotoCameraIcon from '@material-ui/icons/PhotoCamera';\n\nimport { Resizable } from \"re-resizable\";\n\nimport FeatureTitle from '../../components/FeatureTitle';\nimport * as services from './services';\nimport { useToasterUpdate } from '../../components/Toaster/ToasterProvider';\nimport { useStyles, imageResizer } from './styled';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\n\ninterface Props {\n    width: Breakpoint;\n}\n\ninterface WorkerStatus {\n    workerId: string;\n    jobId: string;\n    status: string;\n    progress: number;\n}\n\nconst INITIAL_WORKER_STATUS: WorkerStatus = {\n    workerId: '', jobId: '', status: '', progress: 0\n}\n\nconst ImageOCR: React.FC<Props> = (props: Props) => {\n    const title = 'Image OCR (text extraction)';\n    const classes = useStyles();\n    const { setToasterState } = useToasterUpdate();\n    const [language, setLanguage] = React.useState('eng');\n    const [workerStatus, setWorkerStatus] = React.useState<WorkerStatus>(INITIAL_WORKER_STATUS);\n    const [imgDataURL, setImgDataURL] = React.useState('');\n    const [imgExtractedText, setImgExtractedText] = React.useState('');\n\n    function handleClear(event: any) {\n        event.preventDefault();\n        setWorkerStatus(INITIAL_WORKER_STATUS);\n        setImgDataURL('');\n        setImgExtractedText('');\n    }\n\n    function handleProcess(event: any) {\n        event.preventDefault();\n        if (!imgDataURL) {\n            setToasterState({ open: true, message: 'There is no image to process', type: 'error', autoHideDuration: 2000 });\n            return;\n        }\n\n        setImgExtractedText('Processing the image, please wait…');\n\n        const imageBuffer = Buffer.from(imgDataURL.split(',')[1], 'base64');\n        services.processOCR(language, imageBuffer, logger, setImgExtractedText)\n            .then();\n    }\n\n    function logger(workerStatus: WorkerStatus) {\n        setWorkerStatus(workerStatus);\n        setImgExtractedText(`Processing the image\\n\\t → ${workerStatus.status}…`);\n    }\n\n    function onPasteFromClipboard(e: any) {\n        const clipboardData = e.clipboardData || e.originalEvent.clipboardData || e.originalEvent.clipboard;\n        services.clipboardToDataURL(clipboardData.items,\n            (ev: ProgressEvent<FileReader>) => setImgDataURL(ev.target!.result as string));\n    }\n\n    function onFileSelected(file: File) {\n        const reader = new FileReader();\n        reader.onload = (ev: ProgressEvent<FileReader>) => setImgDataURL(ev.target!.result as string);\n        reader.readAsDataURL(file);\n    }\n\n    React.useEffect(() => {\n        document.onpaste = onPasteFromClipboard;\n        return () => {\n            document.removeEventListener('onpaste', onPasteFromClipboard);\n        };\n    }, []);\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={TextFieldsIcon} title={title} />\n\n                <form noValidate autoComplete=\"off\" className={classes.form}>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel shrink id=\"languageLabel\">Image language</InputLabel>\n                        <Select labelId=\"languageLabel\" id=\"language\"\n                            value={language} autoFocus={isWidthUp('md', props.width)}\n                            onChange={(e: any) => setLanguage(e.target.value)}\n                        >\n                            {/**\n                         * TODO: Add all Tesseract.js supported languages:\n                         * https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016\n                         */}\n                            <MenuItem value=\"eng\">English</MenuItem>\n                            <MenuItem value=\"fra\">French</MenuItem>\n                        </Select>\n                    </FormControl>\n                </form>\n\n                <Card>\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" className={classes.imageSelector}>\n                        {!imgDataURL && (\n                            <div>\n                                <Typography>paste image from clipboard</Typography>\n                                <Typography>or select a file</Typography>\n                                <input type=\"file\" color=\"primary\" accept=\"image/*\"\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => onFileSelected(e.target.files![0])}\n                                    id=\"icon-button-file\" style={{ display: 'none', }}\n                                />\n                                <label htmlFor=\"icon-button-file\">\n                                    <Button variant=\"contained\" component=\"span\" color=\"primary\">\n                                        <PhotoCameraIcon />\n                                    </Button>\n                                </label>\n                            </div>\n                        )}\n                        {imgDataURL && (\n                            <Resizable style={imageResizer} defaultSize={{ width: 300, height: '100%' }}>\n                                <img src={imgDataURL} alt=\"Clipboard content\" className={classes.image} />\n                            </Resizable>\n                        )}\n                    </Box>\n                    {imgDataURL && (\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                            <Button endIcon={<DeleteIcon />} variant=\"contained\" color=\"primary\" onClick={handleClear}>Clear</Button>\n                        </Box>\n                    )}\n                    <CardContent>\n                        <Spinner active={imgExtractedText.startsWith('Processing')}>\n                            <TextField\n                                label=\"Extracted text\"\n                                fullWidth\n                                value={imgExtractedText}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                multiline\n                                rows=\"8\"\n                            />\n                        </Spinner>\n                        <LinearProgress variant=\"determinate\" value={workerStatus.progress * 100} />\n                        <Toolbar className={classes.toolbar}>\n                            <Box display='flex' flexGrow={1}></Box>\n                            <CopyButton data={imgExtractedText} />\n                            <Button variant=\"contained\" color=\"primary\"\n                                onClick={handleProcess} disabled={!imgDataURL}\n                                endIcon={<TextFieldsIcon />}>Run</Button>\n                        </Toolbar>\n                    </CardContent>\n                </Card>\n            </div>\n        </>\n    );\n}\n\nexport default withWidth()(ImageOCR);\n","import { createWorker } from 'tesseract.js';\n\nexport function clipboardToDataURL(items: DataTransferItemList, onLoad: (ev: ProgressEvent<FileReader>) => void): void {\n    if (!items) {\n        return;\n    }\n\n    for (let i = 0; i < items.length; i++) {\n        const item: DataTransferItem = items[i];\n        if (item.type.startsWith('image')) {\n            const reader = new FileReader();\n            reader.onload = onLoad;\n            reader.readAsDataURL(item.getAsFile() as Blob);\n            break;\n        }\n    }\n}\n\nexport async function processOCR(\n    language: string,\n    imageBuffer: Buffer,\n    logger: (log: any) => void,\n    onCompleted: (text: string) => void) {\n\n    const worker = createWorker({ logger });\n    await worker.load();\n    await worker.loadLanguage(language);\n    await worker.initialize(language);\n\n    const result = await worker.recognize(imageBuffer);\n    onCompleted(result.data.text);\n\n    await worker.terminate();\n}\n"],"sourceRoot":""}