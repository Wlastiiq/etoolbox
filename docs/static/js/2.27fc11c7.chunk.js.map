{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/logic/focusFieldBy.ts","../../src/utils/cloneObject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isFileInput.ts","../../src/utils/isFunction.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/omitKeys.ts","../../src/utils/Subject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_createClass","protoProps","staticProps","prototype","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","s","n","e","_e","f","normalCompletion","didErr","step","next","_e2","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","obj","path","defaultValue","isObject","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","get","keys","formStateData","omit","isEmptyObject","find","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","useController","methods","control","shouldUnregister","_formValues","_defaultValues","setInputStateValue","disabled","nameRef","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","formStateSubscription","_subjects","state","subscribe","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useFormState","registerProps","register","rules","updateMounted","field","_fields","_f","mount","controllerSubscription","values","_shouldUnregisterField","_shouldUnregister","_names","array","_isInAction","unregister","onChange","event","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","Controller","render","validateAllFieldCriteria","types","focusFieldBy","fields","callback","fieldsNames","refs","cloneObject","getTime","deepEqual","object1","object2","isPrimitive","keys1","keys2","val1","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","keyName","map","tearDowns","tearDown","push","teardown","observer","subscription","closed","add","observers","subscriber","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","_fieldss","criteriaMode","shouldUseNativeValidation","mounted","required","min","max","maxLength","minLength","pattern","validate","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isString","RegExp","getValidateError","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","_delayCallback","formOptions","submitCount","isSubmitting","isSubmitSuccessful","_isMounted","_timer","Set","unMount","watch","_validateCount","validationMode","getValidationModes","isValidateAllFieldCriteria","debounce","wait","clearTimeout","setTimeout","isFieldWatched","watchAll","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","isValidFromResolver","isWatched","previousError","resolver","_updateValid","delayError","updatedFormState","setFieldValue","shouldRender","fieldValue","isWeb","forEach","selectRef","checkboxRef","radioRef","getValues","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","isCurrentTouched","isChanged","previousIsDirty","_getIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeResolver","context","executeResolverValidation","validateForm","shouldCheckValid","valid","validateField","fieldError","handleChange","inputType","shouldSkipValidation","hasValidation","deps","skipValidation","parentNodeName","valError","_updateValidAndInputValue","shouldSkipValueAs","defaultChecked","setValues","entries","fieldKey","fieldName","_getWatch","fieldNames","isGlobal","fieldValues","_updateValues","_updateFieldArray","method","output","updatedFieldArrayValuesWithKey","shouldSet","shouldSetFields","updatedFieldArrayValues","omitKeys","argA","argB","unsetEmptyArray","setFieldArrayDirtyFields","omitKey","_getFieldArrayValue","setValue","isFieldArray","schemaResult","all","shouldFocus","clearErrors","inputName","setError","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","reset","formValues","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","_removeFields","live","_updateProps","useForm","_formControl"],"mappings":"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","file":"static/js/2.27fc11c7.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { set } from './utils';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  set(control._formValues, name, value);\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    const controllerSubscription = control._subjects.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n    updateMounted(name, true);\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const _shouldUnregisterField =\n        control._shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._isInAction.val\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext();\n  const { control = methods.control, disabled, name } = props || {};\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  const [formState, updateFormState] = React.useState(control._formState.val);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  nameRef.current = name as InternalFieldName;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, _localProxyFormState.current) &&\n        updateFormState({\n          ...control._formState.val,\n          ...formState,\n        }),\n    });\n\n    disabled && formStateSubscription.unsubscribe();\n\n    return () => formStateSubscription.unsubscribe();\n  }, [disabled, control]);\n\n  return getProxyFormState(\n    formState as FormState<TFieldValues>,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (\n      field._f.refs ? field._f.refs.every((ref) => ref.disabled) : ref.disabled\n    ) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fieldss: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fieldss, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  RegisterOptions,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UpdateValues,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport omitKey from '../utils/omitKeys';\nimport omitKeys from '../utils/omitKeys';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let formOptions = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _delayCallback: DelayCallback;\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  };\n  let _fields = {};\n  let _formValues = {};\n  let _defaultValues = formOptions.defaultValues || {};\n  let _isInAction = false;\n  let _isMounted = false;\n  let _timer = 0;\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let _validateCount: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationMode = getValidationModes(formOptions.mode);\n  const isValidateAllFieldCriteria =\n    formOptions.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(_timer);\n      _timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    _names.watchAll ||\n    _names.watch.has(name) ||\n    _names.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const shouldRenderBaseOnError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n    isValidFromResolver?: boolean,\n    isWatched?: boolean,\n  ): Promise<void> => {\n    const previousError = get(_formState.errors, name);\n    const isValid = !!(\n      _proxyFormState.isValid &&\n      (formOptions.resolver ? isValidFromResolver : _updateValid())\n    );\n\n    if (props.delayError && error) {\n      _delayCallback =\n        _delayCallback || debounce(updateErrorState, props.delayError);\n\n      _delayCallback(name, error);\n    } else {\n      clearTimeout(_timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (isWatched ||\n        (error ? !deepEqual(previousError, error) : previousError) ||\n        !isEmptyObject(fieldState) ||\n        (formOptions.resolver && _formState.isValid !== isValid)) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(_proxyFormState.isValid && formOptions.resolver ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(isWatched ? { name } : updatedFormState);\n    }\n\n    _validateCount[name]--;\n\n    if (!_validateCount[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      _validateCount = {};\n    }\n  };\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        set(_formValues, name, getFieldValueAs(value, _f));\n\n        const fieldValue =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\n          _f.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (_f.refs) {\n          if (isCheckBoxInput(_f.ref)) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!fieldValue);\n          } else {\n            _f.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          _f.ref.value = fieldValue;\n        }\n\n        if (shouldRender) {\n          _subjects.control.next({\n            values: getValues(),\n            name,\n          });\n        }\n\n        (options.shouldDirty || options.shouldTouch) &&\n          updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    }\n  };\n\n  const updateTouchAndDirtyState = (\n    name: InternalFieldName,\n    inputValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    const state: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    let isChanged = false;\n\n    if (_proxyFormState.isDirty) {\n      const previousIsDirty = _formState.isDirty;\n      _formState.isDirty = _getIsDirty();\n      state.isDirty = _formState.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(\n        get(_defaultValues, name),\n        inputValue,\n      );\n      isCurrentFieldDirty\n        ? set(_formState.dirtyFields, name, true)\n        : unset(_formState.dirtyFields, name);\n      state.dirtyFields = _formState.dirtyFields;\n      isChanged =\n        isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      state.touchedFields = _formState.touchedFields;\n      isChanged =\n        isChanged ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isChanged && shouldRender && _subjects.state.next(state);\n\n    return isChanged ? state : {};\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) => {\n    return formOptions.resolver\n      ? await formOptions.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          formOptions.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            formOptions.criteriaMode,\n            formOptions.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult);\n  };\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const validateForm = async (\n    _fields: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in _fields) {\n      const field = _fields[name];\n\n      if (field) {\n        const _f = field._f;\n        const val = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n            }\n            fieldError[_f.name]\n              ? set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name);\n          }\n        }\n\n        val && (await validateForm(val, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const handleChange: ChangeHandler = async ({\n    type,\n    target,\n    target: { value, name, type: inputType },\n  }) => {\n    let error;\n    let isValid;\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      let inputValue = inputType ? getFieldValue(field) : undefined;\n      inputValue = isUndefined(inputValue) ? value : inputValue;\n\n      const isBlurEvent = type === EVENTS.BLUR;\n      const { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange } =\n        getValidationModes(formOptions.reValidateMode);\n\n      const shouldSkipValidation =\n        (!hasValidation(field._f, field._f.mount) &&\n          !formOptions.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation({\n          isBlurEvent,\n          isTouched: !!get(_formState.touchedFields, name),\n          isSubmitted: _formState.isSubmitted,\n          isReValidateOnBlur,\n          isReValidateOnChange,\n          ...validationMode,\n        });\n      const isWatched =\n        !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n      if (!isUndefined(inputValue)) {\n        set(_formValues, name, inputValue);\n      }\n\n      const fieldState = updateTouchAndDirtyState(\n        name,\n        inputValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      if (shouldSkipValidation) {\n        !isBlurEvent &&\n          _subjects.watch.next({\n            name,\n            type,\n          });\n        return (\n          shouldRender &&\n          _subjects.state.next(isWatched ? { name } : { ...fieldState, name })\n        );\n      }\n\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (formOptions.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target as Ref) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const valError = get(errors, parentNodeName, {});\n          valError.type && valError.message && (error = valError);\n\n          if (valError || get(_formState.errors, parentNodeName)) {\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          )\n        )[name];\n      }\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type,\n          values: getValues(),\n        });\n\n      if (field._f.deps) {\n        trigger(field._f.deps as FieldPath<TFieldValues>[]);\n      }\n\n      shouldRenderBaseOnError(\n        false,\n        name,\n        error,\n        fieldState,\n        isValid,\n        isWatched,\n      );\n    }\n  };\n\n  const _updateValidAndInputValue = (\n    name: InternalFieldName,\n    ref?: Ref,\n    shouldSkipValueAs?: boolean,\n  ) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      const fieldValue = get(_formValues, name);\n      const isValueUndefined = isUndefined(fieldValue);\n      const defaultValue = isValueUndefined\n        ? get(_defaultValues, name)\n        : fieldValue;\n\n      if (\n        isUndefined(defaultValue) ||\n        (ref && (ref as HTMLInputElement).defaultChecked) ||\n        shouldSkipValueAs\n      ) {\n        set(\n          _formValues,\n          name,\n          shouldSkipValueAs ? defaultValue : getFieldValue(field),\n        );\n      } else {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    _isMounted && _proxyFormState.isValid && _updateValid();\n  };\n\n  const _getIsDirty: GetIsDirty = (name, data) => {\n    name && data && set(_formValues, name, data);\n\n    return !deepEqual({ ...getValues() }, _defaultValues);\n  };\n\n  const _updateValid = async () => {\n    const isValid = formOptions.resolver\n      ? isEmptyObject((await executeResolver()).errors)\n      : await validateForm(_fields, true);\n\n    if (isValid !== _formState.isValid) {\n      _formState.isValid = isValid;\n      _subjects.state.next({\n        isValid,\n      });\n    }\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) =>\n    Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n      const isFieldArray = _names.array.has(name);\n\n      (isFieldArray || !isPrimitive(fieldValue) || (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n          )\n        : setFieldValue(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n            true,\n          );\n    });\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    fieldNames,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_isMounted\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(fieldNames)\n        ? { [fieldNames]: defaultValue }\n        : defaultValue),\n    };\n\n    if (!fieldNames) {\n      isGlobal && (_names.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && _names.watch.add(fieldName as InternalFieldName);\n      result.push(get(fieldValues, fieldName as InternalFieldName));\n    }\n\n    return Array.isArray(fieldNames) ? result : result[0];\n  };\n\n  const _updateValues: UpdateValues<TFieldValues> = (\n    defaultValues,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(_fields, fieldName);\n\n      if (!field || !field._f) {\n        if (\n          (isObject(value) && Object.keys(value).length) ||\n          (Array.isArray(value) && value.length)\n        ) {\n          _updateValues(value, fieldName);\n        } else if (!field) {\n          set(_formValues, fieldName, value);\n        }\n      }\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    keyName,\n    name,\n    method,\n    args,\n    updatedFieldArrayValuesWithKey = [],\n    shouldSet = true,\n    shouldSetFields = true,\n  ) => {\n    let output;\n    const updatedFieldArrayValues = omitKeys(\n      updatedFieldArrayValuesWithKey,\n      keyName,\n    );\n    _isInAction = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      output = method(get(_fields, name), args.argA, args.argB);\n      shouldSet && set(_fields, name, output);\n    }\n\n    output = method(get(_formValues, name), args.argA, args.argB);\n    shouldSet && set(_formValues, name, output);\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSet && set(_formState.errors, name, output);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const output = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(_formState.touchedFields, name, output);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      set(\n        _formState.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues, keyName),\n          get(_defaultValues, name, []),\n          get(_formState.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          _formState.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues, keyName),\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n      unsetEmptyArray(_formState.dirtyFields, name);\n    }\n\n    _subjects.state.next({\n      isDirty: _getIsDirty(name, omitKey(updatedFieldArrayValues, keyName)),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const _getFieldArrayValue = (name: InternalFieldName) =>\n    get(_isMounted ? _formValues : _defaultValues, name, []);\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          _formState.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getIsDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n    let isValid;\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (formOptions.resolver) {\n      const schemaResult = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n      isValid = name\n        ? fieldNames.every((name) => !get(schemaResult, name))\n        : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (\n          await Promise.all(\n            fieldNames.map(async (fieldName) => {\n              const field = get(_fields, fieldName);\n              return await validateForm(\n                field._f ? { [fieldName]: field } : field,\n              );\n            }),\n          )\n        ).every(Boolean);\n      } else {\n        await validateForm(_fields);\n        isValid = isEmptyObject(_formState.errors);\n      }\n    }\n\n    _subjects.state.next({\n      ...(isString(name) ? { name } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n    }\n\n    _proxyFormState.isValid && _updateValid();\n\n    return isValid;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ..._formValues,\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {});\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            fieldName(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : _getWatch(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(inputName);\n      _names.array.delete(inputName);\n\n      if (get(_fields, inputName) as Field) {\n        if (!options.keepValue) {\n          unset(_fields, inputName);\n          unset(_formValues, inputName);\n        }\n\n        !options.keepError && unset(_formState.errors, inputName);\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\n        !formOptions.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, inputName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getIsDirty() }),\n    });\n    !options.keepIsValid && _updateValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    fieldRef: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field: Field = get(_fields, name);\n    const ref = isUndefined(fieldRef.value)\n      ? fieldRef.querySelectorAll\n        ? (fieldRef.querySelectorAll('input,select,textarea')[0] as Ref) ||\n          fieldRef\n        : fieldRef\n      : fieldRef;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(_fields, name, field);\n\n    _updateValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n\n    if (options.value) {\n      set(_formValues, name, options.value);\n    }\n\n    if (\n      !isUndefined(options.disabled) &&\n      field &&\n      field._f &&\n      field._f.ref.disabled !== options.disabled\n    ) {\n      set(_formValues, name, options.disabled ? undefined : field._f.ref.value);\n    }\n\n    _names.mount.add(name);\n    !field && _updateValidAndInputValue(name, undefined, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isUndefined(options.disabled)\n            ? {}\n            : { disabled: options.disabled }),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              registerFieldRef(name, ref, options);\n            } else {\n              const field = get(_fields, name, {}) as Field;\n              const _shouldUnregister =\n                formOptions.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              _shouldUnregister &&\n                !(isNameInFieldArray(_names.array, name) && _isInAction) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (formOptions.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          formOptions.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const values = cloneObject(updatedValues);\n\n    _formValues = values;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of _names.mount) {\n        const field = get(_fields, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : { ...updatedValues },\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _isMounted = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  const _removeFields = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name) as Field;\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getIsDirty,\n      _updateValid,\n      _updateValues,\n      _removeFields,\n      _updateFieldArray,\n      _getFieldArrayValue,\n      _subjects,\n      _shouldUnregister: formOptions.shouldUnregister,\n      _fields,\n      _proxyFormState,\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _isMounted() {\n        return _isMounted;\n      },\n      set _isMounted(value) {\n        _isMounted = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      _isInAction: {\n        get val() {\n          return _isInAction;\n        },\n        set val(value) {\n          _isInAction = value;\n        },\n      },\n      _formState: {\n        get val() {\n          return _formState;\n        },\n        set val(value) {\n          _formState = value;\n        },\n      },\n      _updateProps: (options) => {\n        formOptions = { ...defaultOptions, ...options };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport { FieldValues, FormState, UseFormProps, UseFormReturn } from './types';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._updateProps(props);\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n          control._formState.val = {\n            ...control._formState.val,\n            ...formState,\n          };\n\n          updateFormState({ ...control._formState.val });\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n    };\n  }, [control]);\n\n  React.useEffect(() => {\n    if (!control._isMounted) {\n      control._isMounted = true;\n      control._proxyFormState.isValid && control._updateValid();\n      !props.shouldUnregister && control._updateValues(control._defaultValues);\n    }\n    control._removeFields();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}