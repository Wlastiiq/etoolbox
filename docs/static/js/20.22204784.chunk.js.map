{"version":3,"sources":["containers/DateConverter/styles.ts","containers/DateConverter/index.tsx"],"names":["StyledTableCell","withStyles","theme","body","fontSize","spacing","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","panel","marginBottom","form","display","flexWrap","value","fontFamily","tableHeader","primary","main","timePickerField","marginLeft","marginRight","width","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","withWidth","props","title","classes","useState","Date","date","setDate","React","selectedDate","setSelectedDate","handleDateChange","getTime","useEffect","Helmet","className","FeatureTitle","iconType","EventIcon","noValidate","utils","DateFnsUtils","Grid","container","justifyContent","Box","alignItems","TextField","autoFocus","isWidthUp","label","placeholder","type","variant","onChange","e","target","Button","color","onClick","format","KeyboardButtonProps","TableContainer","component","Paper","Table","TableHead","TableBody","scope","toISOString","toLocaleDateString","toLocaleTimeString","getTimezoneOffset","toUTCString"],"mappings":"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","file":"static/js/20.22204784.chunk.js","sourcesContent":["import { makeStyles, TableCell, TableRow, withStyles } from '@material-ui/core';\n\nexport const StyledTableCell = withStyles((theme) => ({\n    body: {\n        fontSize: theme.spacing(1.75),\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    panel: {\n        marginBottom: theme.spacing(3),\n    },\n    form: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    value: {\n        fontFamily: 'monospace',\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    timePickerField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 260,\n    },\n}));\n","import { Box, Button, Paper, Table, TableBody, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport TextField from '@material-ui/core/TextField';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport EventIcon from '@material-ui/icons/Event';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { setTextAction } from '../../actions/text-actions';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst DateConverter: React.FC<Props> = (props: Props) => {\n    const title = 'Date & Epoch';\n    const classes = useStyles();\n    const { inputText, storeInputText } = props;\n    const [date, setDate] = useState<Date>(new Date());\n    const [selectedDate, setSelectedDate] = React.useState<Date | null>(null);\n\n    const handleDateChange = (date: Date | null) => {\n        setSelectedDate(date);\n        storeInputText('lastEpochValue', `${date?.getTime()}`);\n    };\n\n    useEffect(() => {\n        if (inputText) {\n            setDate(new Date(+inputText));\n        }\n    }, [inputText]);\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={EventIcon} title={title} />\n\n                <form className={classes.form} noValidate>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <Grid container justifyContent='space-between'>\n                            <Box display='flex' alignItems='center'>\n                                <TextField\n                                    autoFocus={isWidthUp('md', props.width)}\n                                    label='Epoch value'\n                                    placeholder='Epoch value'\n                                    type='number'\n                                    variant='outlined'\n                                    margin='normal'\n                                    value={inputText}\n                                    onChange={(e) => storeInputText('lastEpochValue', e.target.value)}\n                                />\n                                <Button\n                                    variant='contained'\n                                    title=\"Update value with 'Now' value\"\n                                    color='primary'\n                                    onClick={() => handleDateChange(new Date())}\n                                >\n                                    <TimerIcon />\n                                </Button>\n                            </Box>\n                            <div>\n                                <KeyboardDatePicker\n                                    margin='normal'\n                                    label='Date'\n                                    format='yyyy-MM-dd'\n                                    value={selectedDate}\n                                    onChange={handleDateChange}\n                                    KeyboardButtonProps={{\n                                        'aria-label': 'change date',\n                                    }}\n                                />\n                                <KeyboardTimePicker\n                                    margin='normal'\n                                    label='Time'\n                                    value={selectedDate}\n                                    onChange={handleDateChange}\n                                    KeyboardButtonProps={{\n                                        'aria-label': 'change time',\n                                    }}\n                                />\n                            </div>\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                </form>\n\n                <TableContainer component={Paper} className={classes.panel}>\n                    <Table>\n                        <TableHead className={classes.tableHeader}>\n                            <TableRow>\n                                <StyledTableCell>Description</StyledTableCell>\n                                <StyledTableCell>Value</StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    ISO string / JSON\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <span className={classes.value}>{date.toISOString()}</span>\n                                </StyledTableCell>\n                            </StyledTableRow>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    Locale date string\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    <span className={classes.value}>\n                                        {date.toLocaleDateString()} {date.toLocaleTimeString()}\n                                    </span>\n                                </StyledTableCell>\n                            </StyledTableRow>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    Timezone offset\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    {date.getTimezoneOffset()} minutes ({date.getTimezoneOffset() / 60} hours)\n                                </StyledTableCell>\n                            </StyledTableRow>\n                            <StyledTableRow>\n                                <StyledTableCell component='th' scope='row'>\n                                    UTC string\n                                </StyledTableCell>\n                                <StyledTableCell>{date.toUTCString()}</StyledTableCell>\n                            </StyledTableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastEpochValue'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(DateConverter));\n"],"sourceRoot":""}