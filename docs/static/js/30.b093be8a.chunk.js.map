{"version":3,"sources":["containers/CommonLists/styles.ts","containers/CommonLists/TabPanel.tsx","containers/CommonLists/index.tsx","components/Filter/styles.ts","components/Filter/index.tsx","components/FilterStats/styles.ts","components/FilterStats/index.tsx"],"names":["StyledTableCell","withStyles","body","fontSize","whiteSpace","wordBreak","TableCell","StyledTableRow","theme","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","spacing","toolbar","padding","marginLeft","tabsPanel","flexGrow","width","marginTop","background","paper","tabsBar","marginBottom","tableHeader","primary","main","TabPanel","props","children","value","index","other","isTabSelected","role","hidden","id","aria-labelledby","TABS","mapStateToProps","state","mimeTypes","elements","filteringMimeTypes","filtering","htmlEntities","filteringHtmlEntities","mapDispatchToProps","dispatch","applyMimeTypesFilter","searchTerm","applyHtmlEntitiesFilter","connect","classes","React","useState","MIME_TYPES","selectedTab","setSelectedTab","inputFilter","setInputFilter","searching","applyFilter","newInputFilter","Helmet","title","Paper","square","Tabs","onChange","_e","newTab","indicatorColor","textColor","variant","scrollButtons","aria-label","Tab","label","aria-controls","className","Toolbar","Filter","initialFilter","onFilterChange","Box","display","FilterStats","count","size","length","TableContainer","component","Table","TableHead","scope","TableBody","keys","map","key","get","join","searchWords","textToHighlight","HTML_ENTITIES","htmlEntity","character","entityName","entityNumber","description","autofocus","filter","setFilter","inputLabel","debounced","useDebouncedCallback","useEffect","callback","FormControl","InputLabel","htmlFor","Input","autoFocus","type","e","target","endAdornment","InputAdornment","position","IconButton","SPACE","working","setWorking","setTimeout","Typography","align"],"mappings":"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","file":"static/js/30.b093be8a.chunk.js","sourcesContent":["import { makeStyles, TableCell, TableRow, withStyles } from \"@material-ui/core\";\n\nexport const StyledTableCell = withStyles(() => ({\n    body: {\n        fontSize: 14,\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    tabsPanel: {\n        flexGrow: 1,\n        width: '100%',\n        marginTop: theme.spacing(3),\n        backgroundColor: theme.palette.background.paper,\n    },\n    tabsBar: {\n        marginBottom: theme.spacing(2),\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n}));\n","import PropTypes from 'prop-types';\n\nexport function TabPanel(props: any) {\n    const { children, value, index, ...other } = props;\n    const isTabSelected = value === index;\n\n    return (\n        <div role=\"tabpanel\"\n            hidden={!isTabSelected}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}\n        >\n            {isTabSelected && (\n                <>\n                    {children}\n                </>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n};\n","import { Box, Paper, Tab, Table, TableBody, TableContainer, TableHead, TableRow, Tabs, Toolbar } from '@material-ui/core';\nimport React from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { applyHtmlEntitiesFilter, HtmlEntity } from '../../actions/html-entitie-actions';\nimport { applyMimeTypesFilter } from '../../actions/mime-type-actions';\nimport { AppState } from '../../reducers';\nimport Filter from '../../components/Filter';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\nimport { TabPanel } from './TabPanel';\nimport { Helmet } from 'react-helmet';\nimport FilterStats from '../../components/FilterStats';\n\nenum TABS {\n    MIME_TYPES = 0,\n    HTML_ENTITIES = 1,\n}\n\ninterface Props {\n    mimeTypes: Map<string, string[]>;\n    filteringMimeTypes: boolean;\n    htmlEntities: HtmlEntity[];\n    filteringHtmlEntities: boolean;\n\n    applyMimeTypesFilter: (searchTerm: string) => void;\n    applyHtmlEntitiesFilter: (searchTerm: string) => void;\n}\n\nconst CommonLists: React.FC<Props> = (props: Props) => {\n    const title = 'Mime-types, HTML Entitiesâ€¦';\n    const classes = useStyles();\n    const [selectedTab, setSelectedTab] = React.useState(TABS.MIME_TYPES);\n    const [inputFilter, setInputFilter] = React.useState('');\n    const { filteringMimeTypes, mimeTypes, filteringHtmlEntities, htmlEntities, applyMimeTypesFilter, applyHtmlEntitiesFilter } = props;\n    const searching = filteringMimeTypes || filteringHtmlEntities;\n\n    const onTabSelected = (_e: any, newTab: number) => {\n        setSelectedTab(newTab);\n        applyFilter('');\n    };\n\n    function applyFilter(newInputFilter: string) {\n        setInputFilter(newInputFilter);\n        if (selectedTab === TABS.MIME_TYPES) {\n            applyMimeTypesFilter(newInputFilter);\n        } else {\n            applyHtmlEntitiesFilter(newInputFilter);\n        }\n    }\n\n    function getElementsCount(): number {\n        if (selectedTab === TABS.MIME_TYPES) {\n            return mimeTypes.size;\n        } else {\n            return htmlEntities.length;\n        }\n    }\n\n    return (\n        <>\n            <Helmet title={title} />\n            <Paper square>\n                <Tabs\n                    value={selectedTab}\n                    onChange={onTabSelected}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"scrollable\"\n                    scrollButtons=\"on\"\n                    aria-label=\"Common web lists\"\n                >\n                    <Tab label=\"Mime-types\" id=\"mime-types\" aria-controls=\"tab-mime-types\" />\n                    <Tab label=\"HTML Entities\" id=\"html-entities\" aria-controls=\"tab-html-entities\" />\n                </Tabs>\n            </Paper>\n\n            <div className={classes.root}>\n\n                <Toolbar className={classes.toolbar}>\n                    <Filter initialFilter={inputFilter} onFilterChange={applyFilter} />\n                    <Box display='flex' flexGrow={1}></Box>\n                    <FilterStats count={getElementsCount()} searching={searching} />\n                </Toolbar>\n\n                <TabPanel value={selectedTab} index={TABS.MIME_TYPES}>\n                    <TableContainer component={Paper}>\n                        <Table>\n                            <TableHead className={classes.tableHeader}>\n                                <TableRow>\n                                    <StyledTableCell component=\"th\" scope=\"row\">Mime Type</StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">File extension</StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {[...mimeTypes.keys()].map(key => {\n                                    const extensions: string[] = mimeTypes.get(key) || [];\n                                    const value = extensions.join(', ');\n                                    return (\n                                        <StyledTableRow key={key}>\n                                            <StyledTableCell>\n                                                <Highlighter searchWords={[inputFilter]} textToHighlight={key} />\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                <Highlighter searchWords={[inputFilter]} textToHighlight={value} />\n                                            </StyledTableCell>\n                                        </StyledTableRow>\n                                    )\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </TabPanel>\n\n                <TabPanel value={selectedTab} index={TABS.HTML_ENTITIES}>\n                    <TableContainer component={Paper}>\n                        <Table>\n                            <TableHead className={classes.tableHeader}>\n                                <TableRow>\n                                    <StyledTableCell component=\"th\" scope=\"row\">Entity</StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">Name</StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">Number</StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">Description</StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {htmlEntities.map(htmlEntity => (\n                                    <StyledTableRow key={htmlEntity.entityNumber}>\n                                        <StyledTableCell>\n                                            <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.character} />\n                                        </StyledTableCell>\n                                        <StyledTableCell>\n                                            <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.entityName} />\n                                        </StyledTableCell>\n                                        <StyledTableCell>\n                                            <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.entityNumber} />\n                                        </StyledTableCell>\n                                        <StyledTableCell>\n                                            <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.description} />\n                                        </StyledTableCell>\n                                    </StyledTableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </TabPanel>\n            </div>\n        </>\n    );\n}\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        mimeTypes: state.mimeTypes.elements,\n        filteringMimeTypes: state.mimeTypes.filtering,\n\n        htmlEntities: state.htmlEntities.elements,\n        filteringHtmlEntities: state.htmlEntities.filtering,\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        applyMimeTypesFilter: (searchTerm: string) => dispatch(applyMimeTypesFilter(searchTerm)),\n        applyHtmlEntitiesFilter: (searchTerm: string) => dispatch(applyHtmlEntitiesFilter(searchTerm)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommonLists);\n","import { makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n}));\n","import React from 'react';\nimport { FormControl, IconButton, Input, InputAdornment, InputLabel } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport { useStyles } from './styles';\nimport { useDebouncedCallback } from 'use-debounce/lib';\n\ninterface Props {\n    label?: string;\n    autofocus?: boolean;\n    initialFilter: string;\n    onFilterChange: (newValue: string) => void;\n}\n\nconst Filter: React.FC<Props> = (props: Props) => {\n    const { autofocus, initialFilter, label, onFilterChange } = props;\n    const [filter, setFilter] = React.useState('');\n    const classes = useStyles();\n    const inputLabel = label ? label : 'Search';\n\n    // https://www.npmjs.com/package/use-debounce\n    const debounced = useDebouncedCallback(\n        (filter: string) => onFilterChange(filter),\n        300\n    );\n\n    React.useEffect(() => { setFilter(initialFilter) }, [initialFilter]);\n    React.useEffect(() => debounced.callback(filter), [filter, debounced]);\n\n    return (\n        <FormControl className={classes.root}>\n            <InputLabel htmlFor=\"searchField\">{inputLabel}</InputLabel>\n            <Input\n                id=\"searchField\"\n                autoFocus={autofocus}\n                type=\"text\"\n                value={filter}\n                onChange={e => setFilter(e.target.value)}\n                endAdornment={\n                    <InputAdornment position=\"end\">\n                        <IconButton><SearchIcon /></IconButton>\n                    </InputAdornment>\n                }\n            />\n        </FormControl>\n    );\n}\n\nexport default Filter;\n","import { makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n}));\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\n\nimport { useStyles } from './styles';\nimport { SPACE } from '../../constants';\n\ninterface Props {\n    searching: boolean;\n    count: number;\n}\n\nconst FILTERING = 'filteringâ€¦';\n\nconst FilterStats: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const [working, setWorking] = React.useState(SPACE);\n    const { count, searching } = props;\n\n    React.useEffect(() => {\n        if (searching) {\n            setWorking(FILTERING);\n        } else {\n            setTimeout(() => setWorking(SPACE), 800);\n        }\n    }, [searching]);\n\n    return (\n        <div className={classes.root}>\n            <Typography align=\"right\">{working}</Typography>\n            <Typography align=\"right\">{count}</Typography>\n        </div>\n    );\n}\n\nexport default FilterStats;\n"],"sourceRoot":""}