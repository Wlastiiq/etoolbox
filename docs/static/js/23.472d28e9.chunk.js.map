{"version":3,"sources":["containers/QRCodeGenerator/index.tsx","containers/QRCodeGenerator/services.ts"],"names":["useStyles","makeStyles","theme","root","margin","spacing","doc","toolbar","padding","marginLeft","qrOptions","fontFamily","generatedQR","DEFAULT_OPTIONS","errorCorrectionLevel","type","width","quality","color","dark","light","mapStateToProps","state","inputText","textInputs","inputOptions","mapDispatchToProps","dispatch","storeInputText","name","value","setTextAction","connect","withWidth","props","title","classes","React","useState","imgDataURL","setImgDataURL","Helmet","className","FeatureTitle","iconType","SelectAllIcon","Typography","align","Link","target","rel","href","noValidate","autoComplete","Grid","container","item","md","sm","xs","TextField","autoFocus","isWidthUp","label","placeholder","multiline","rows","variant","fullWidth","onChange","e","InputProps","input","Toolbar","Box","display","flexGrow","CopyButton","data","Button","onClick","opts","JSON","parse","QRCode","toDataURL","err","url","options","stringify","console","error","services","disabled","endIcon","Card","alignItems","justifyContent","src","alt","CardContent"],"mappings":"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","file":"static/js/23.472d28e9.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport QRCode from 'qrcode';\n\nimport { Box, Button, Card, CardContent, Grid, Link, TextField, Toolbar, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport SelectAllIcon from '@material-ui/icons/SelectAll';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\n\nimport * as services from './services';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    doc: {\n        margin: theme.spacing(2),\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    qrOptions :{\n        fontFamily: 'monospace',\n    },\n    generatedQR: {\n        padding: theme.spacing(2),\n    },\n}));\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    inputOptions?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst DEFAULT_OPTIONS = {\n    errorCorrectionLevel: 'H',\n    type: 'image/png',\n    width: 200,\n    quality: 0.3,\n    margin: 1,\n    color: {\n        dark: '#000000FF',\n        light: '#FFFFFFFF',\n    },\n};\n\nconst QRCodeGenerator: React.FC<Props> = (props: Props) => {\n    const title = 'QR Code generator';\n    const classes = useStyles();\n    const { inputText, inputOptions, storeInputText } = props;\n    const [imgDataURL, setImgDataURL] = React.useState('');\n\n    function generate() {\n        if (!inputText) {\n            return;\n        }\n\n        const opts = inputOptions ? JSON.parse(inputOptions) : DEFAULT_OPTIONS;\n        QRCode.toDataURL(inputText, opts, (err, url) => {\n            if (err) {\n                throw err;\n            }\n\n            setImgDataURL(url);\n            storeInputText('lastQRCodeOptions', services.jsonFormat(JSON.stringify(opts)));\n        });\n    }\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={SelectAllIcon} title={title} />\n\n                <Typography align='center' className={classes.doc}>\n                    <Link target='_blank' rel='noreferrer' href='https://www.npmjs.com/package/qrcode#qr-code-options'>\n                        Generation options documentation available here!\n                    </Link>\n                </Typography>\n\n                <form noValidate autoComplete='off'>\n                    <Grid container spacing={1}>\n                        <Grid item md={6} sm={12} xs={12}>\n                            <TextField\n                                autoFocus={isWidthUp('md', props.width)}\n                                label='Text to store into QR Code'\n                                placeholder='Paste or type the content here'\n                                multiline\n                                rows={10}\n                                variant='outlined'\n                                margin='normal'\n                                fullWidth={true}\n                                value={inputText}\n                                onChange={(e) => storeInputText('lastQRCodeTextValue', e.target.value)}\n                            />\n                        </Grid>\n                        <Grid item md={6} sm={12} xs={12}>\n                            <TextField\n                                label='QR Code generation options'\n                                multiline\n                                rows={10}\n                                variant='outlined'\n                                margin='normal'\n                                fullWidth={true}\n                                InputProps={{\n                                    classes: {\n                                        input: classes.qrOptions,\n                                    },\n                                }}\n                                value={inputOptions}\n                                onChange={(e) => storeInputText('lastQRCodeOptions', e.target.value)}\n                            />\n                        </Grid>\n                    </Grid>\n                </form>\n\n                <Toolbar className={classes.toolbar}>\n                    <Box display='flex' flexGrow={1}></Box>\n                    <CopyButton data={imgDataURL} />\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        onClick={generate}\n                        disabled={!inputText}\n                        endIcon={<SelectAllIcon />}\n                    >\n                        Generate\n                    </Button>\n                </Toolbar>\n\n                {imgDataURL && (\n                    <Card className={classes.generatedQR}>\n                        <Box display='flex' alignItems='center' justifyContent='center'>\n                            <img src={imgDataURL} alt='QR Code' />\n                        </Box>\n                        <CardContent>\n                            <TextField\n                                label='Full img tag'\n                                fullWidth\n                                value={`<img alt=\"QR Code\" src=\"${imgDataURL}\"/>`}\n                                margin='normal'\n                                variant='outlined'\n                            />\n                            <TextField\n                                label=\"QR Code. Copy-paste into 'src' attribute\"\n                                fullWidth\n                                value={imgDataURL}\n                                margin='normal'\n                                variant='outlined'\n                                multiline\n                                rows='8'\n                            />\n                        </CardContent>\n                    </Card>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastQRCodeTextValue'],\n        inputOptions: state.textInputs['lastQRCodeOptions'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(QRCodeGenerator));\n","export function jsonFormat(value: string | undefined): string {\n    if (!value) {\n        return '{}';\n    }\n\n    try {\n        const options = JSON.parse(value);\n        return JSON.stringify(options, null, 2);\n    } catch (e) {\n        console.error(e, value);\n        return '{}';\n    }\n}\n"],"sourceRoot":""}