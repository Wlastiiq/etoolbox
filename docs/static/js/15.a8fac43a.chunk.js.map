{"version":3,"sources":["containers/CommonLists/styles.ts","containers/CommonLists/TabPanel.tsx","containers/CommonLists/index.tsx","components/Filter/styles.ts","components/Filter/index.tsx","components/FilterStats/styles.ts","components/FilterStats/index.tsx"],"names":["StyledTableCell","withStyles","body","fontSize","whiteSpace","wordBreak","TableCell","StyledTableRow","theme","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","spacing","toolbar","padding","marginLeft","tabsPanel","flexGrow","width","marginTop","background","paper","tabsBar","marginBottom","tableHeader","primary","main","TabPanel","props","children","value","index","other","isTabSelected","role","hidden","id","aria-labelledby","TABS","mapStateToProps","state","mimeTypes","elements","filteringMimeTypes","filtering","htmlEntities","filteringHtmlEntities","mapDispatchToProps","dispatch","applyMimeTypesFilter","searchTerm","applyHtmlEntitiesFilter","connect","classes","React","useState","MIME_TYPES","selectedTab","setSelectedTab","inputFilter","setInputFilter","searching","page","setPage","rowsPerPage","setRowsPerPage","handleChangeRowsPerPage","evt","target","applyFilter","newInputFilter","Helmet","title","Paper","square","Tabs","onChange","_e","newTab","indicatorColor","textColor","variant","scrollButtons","aria-label","Tab","label","aria-controls","className","Toolbar","Filter","initialFilter","onFilterChange","Box","display","FilterStats","count","size","length","TablePagination","rowsPerPageOptions","component","keys","onPageChange","_","onRowsPerPageChange","TableContainer","Table","TableHead","scope","TableBody","slice","map","key","get","join","searchWords","textToHighlight","HTML_ENTITIES","htmlEntity","character","entityName","entityNumber","description","autofocus","filter","setFilter","inputLabel","debounced","useDebouncedCallback","useEffect","FormControl","InputLabel","htmlFor","Input","autoFocus","type","e","endAdornment","InputAdornment","position","IconButton","SPACE","working","setWorking","setTimeout","Typography","align"],"mappings":"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","file":"static/js/15.a8fac43a.chunk.js","sourcesContent":["import { makeStyles, TableCell, TableRow, withStyles } from \"@material-ui/core\";\n\nexport const StyledTableCell = withStyles(() => ({\n    body: {\n        fontSize: 14,\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    tabsPanel: {\n        flexGrow: 1,\n        width: '100%',\n        marginTop: theme.spacing(3),\n        backgroundColor: theme.palette.background.paper,\n    },\n    tabsBar: {\n        marginBottom: theme.spacing(2),\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n}));\n","import PropTypes from 'prop-types';\n\nexport function TabPanel(props: any) {\n    const { children, value, index, ...other } = props;\n    const isTabSelected = value === index;\n\n    return (\n        <div role=\"tabpanel\"\n            hidden={!isTabSelected}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}\n        >\n            {isTabSelected && (\n                <>\n                    {children}\n                </>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n};\n","import { Box, Paper, Tab, Table, TableBody, TableContainer, TableHead, TablePagination, TableRow, Tabs, Toolbar } from '@material-ui/core';\nimport React from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { applyHtmlEntitiesFilter, HtmlEntity } from '../../actions/html-entitie-actions';\nimport { applyMimeTypesFilter } from '../../actions/mime-type-actions';\nimport { AppState } from '../../reducers';\nimport Filter from '../../components/Filter';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\nimport { TabPanel } from './TabPanel';\nimport { Helmet } from 'react-helmet';\nimport FilterStats from '../../components/FilterStats';\n\nenum TABS {\n    MIME_TYPES = 0,\n    HTML_ENTITIES = 1,\n}\n\ninterface Props {\n    mimeTypes: Map<string, string[]>;\n    filteringMimeTypes: boolean;\n    htmlEntities: HtmlEntity[];\n    filteringHtmlEntities: boolean;\n\n    applyMimeTypesFilter: (searchTerm: string) => void;\n    applyHtmlEntitiesFilter: (searchTerm: string) => void;\n}\n\nconst CommonLists: React.FC<Props> = (props: Props) => {\n    const title = 'Mime-types, HTML Entities…';\n    const classes = useStyles();\n    const [selectedTab, setSelectedTab] = React.useState(TABS.MIME_TYPES);\n    const [inputFilter, setInputFilter] = React.useState('');\n    const { filteringMimeTypes, mimeTypes, filteringHtmlEntities, htmlEntities, applyMimeTypesFilter, applyHtmlEntitiesFilter } = props;\n    const searching = filteringMimeTypes || filteringHtmlEntities;\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  \n    const handleChangeRowsPerPage = (evt: any) => {\n      setRowsPerPage(+evt.target.value);\n      setPage(0);\n    };\n\n    const onTabSelected = (_e: any, newTab: number) => {\n        setSelectedTab(newTab);\n        applyFilter('');\n        setPage(0);\n    };\n\n    function applyFilter(newInputFilter: string) {\n        setInputFilter(newInputFilter);\n        setPage(0);\n        if (selectedTab === TABS.MIME_TYPES) {\n            applyMimeTypesFilter(newInputFilter);\n        } else {\n            applyHtmlEntitiesFilter(newInputFilter);\n        }\n    }\n\n    function getElementsCount(): number {\n        if (selectedTab === TABS.MIME_TYPES) {\n            return mimeTypes.size;\n        } else {\n            return htmlEntities.length;\n        }\n    }\n\n    return (\n        <>\n            <Helmet title={title} />\n            <Paper square>\n                <Tabs\n                    value={selectedTab}\n                    onChange={onTabSelected}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"scrollable\"\n                    scrollButtons=\"on\"\n                    aria-label=\"Common web lists\"\n                >\n                    <Tab label=\"Mime-types\" id=\"mime-types\" aria-controls=\"tab-mime-types\" />\n                    <Tab label=\"HTML Entities\" id=\"html-entities\" aria-controls=\"tab-html-entities\" />\n                </Tabs>\n            </Paper>\n\n            <div className={classes.root}>\n\n                <Toolbar className={classes.toolbar}>\n                    <Filter initialFilter={inputFilter} onFilterChange={applyFilter} />\n                    <Box display='flex' flexGrow={1}></Box>\n                    <FilterStats count={getElementsCount()} searching={searching} />\n                </Toolbar>\n\n                <TabPanel value={selectedTab} index={TABS.MIME_TYPES}>\n                    <TablePagination\n                        rowsPerPageOptions={[5, 10, 25, 50, 100]}\n                        component='div'\n                        count={[...mimeTypes.keys()].length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={(_, page) => setPage(page)}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                    <TableContainer component={Paper}>\n                        <Table>\n                            <TableHead className={classes.tableHeader}>\n                                <TableRow>\n                                    <StyledTableCell component=\"th\" scope=\"row\">Mime Type</StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">File extension</StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {[...mimeTypes.keys()]\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                    .map(key => {\n                                    const extensions: string[] = mimeTypes.get(key) || [];\n                                    const value = extensions.join(', ');\n                                    return (\n                                        <StyledTableRow key={key}>\n                                            <StyledTableCell>\n                                                <Highlighter searchWords={[inputFilter]} textToHighlight={key} />\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                <Highlighter searchWords={[inputFilter]} textToHighlight={value} />\n                                            </StyledTableCell>\n                                        </StyledTableRow>\n                                    )\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </TabPanel>\n\n                <TabPanel value={selectedTab} index={TABS.HTML_ENTITIES}>\n                    <TablePagination\n                        rowsPerPageOptions={[5, 10, 25, 50, 100]}\n                        component='div'\n                        count={htmlEntities.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={(_, page) => setPage(page)}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                    <TableContainer component={Paper}>\n                        <Table>\n                            <TableHead className={classes.tableHeader}>\n                                <TableRow>\n                                    <StyledTableCell component=\"th\" scope=\"row\">Entity</StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">Name</StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">Number</StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">Description</StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {htmlEntities\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                    .map(htmlEntity => (\n                                    <StyledTableRow key={htmlEntity.entityNumber}>\n                                        <StyledTableCell>\n                                            <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.character} />\n                                        </StyledTableCell>\n                                        <StyledTableCell>\n                                            <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.entityName} />\n                                        </StyledTableCell>\n                                        <StyledTableCell>\n                                            <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.entityNumber} />\n                                        </StyledTableCell>\n                                        <StyledTableCell>\n                                            <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.description} />\n                                        </StyledTableCell>\n                                    </StyledTableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </TabPanel>\n            </div>\n        </>\n    );\n}\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        mimeTypes: state.mimeTypes.elements,\n        filteringMimeTypes: state.mimeTypes.filtering,\n\n        htmlEntities: state.htmlEntities.elements,\n        filteringHtmlEntities: state.htmlEntities.filtering,\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        applyMimeTypesFilter: (searchTerm: string) => dispatch(applyMimeTypesFilter(searchTerm)),\n        applyHtmlEntitiesFilter: (searchTerm: string) => dispatch(applyHtmlEntitiesFilter(searchTerm)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommonLists);\n","import { makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n}));\n","import React from 'react';\nimport { FormControl, IconButton, Input, InputAdornment, InputLabel } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport { useStyles } from './styles';\nimport { useDebouncedCallback } from 'use-debounce/lib';\n\ninterface Props {\n    label?: string;\n    autofocus?: boolean;\n    initialFilter: string;\n    onFilterChange: (newValue: string) => void;\n}\n\nconst Filter: React.FC<Props> = (props: Props) => {\n    const { autofocus, initialFilter, label, onFilterChange } = props;\n    const [filter, setFilter] = React.useState('');\n    const classes = useStyles();\n    const inputLabel = label ? label : 'Search';\n\n    // https://www.npmjs.com/package/use-debounce\n    const debounced = useDebouncedCallback(\n        (filter: string) => onFilterChange(filter),\n        300\n    );\n\n    React.useEffect(() => { setFilter(initialFilter) }, [initialFilter]);\n    React.useEffect(() => debounced(filter), [filter, debounced]);\n\n    return (\n        <FormControl className={classes.root}>\n            <InputLabel htmlFor=\"searchField\">{inputLabel}</InputLabel>\n            <Input\n                id=\"searchField\"\n                autoFocus={autofocus}\n                type=\"text\"\n                value={filter}\n                onChange={e => setFilter(e.target.value)}\n                endAdornment={\n                    <InputAdornment position=\"end\">\n                        <IconButton><SearchIcon /></IconButton>\n                    </InputAdornment>\n                }\n            />\n        </FormControl>\n    );\n}\n\nexport default Filter;\n","import { makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n}));\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\n\nimport { useStyles } from './styles';\nimport { SPACE } from '../../constants';\n\ninterface Props {\n    searching: boolean;\n    count: number;\n}\n\nconst FILTERING = 'filtering…';\n\nconst FilterStats: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const [working, setWorking] = React.useState(SPACE);\n    const { count, searching } = props;\n\n    React.useEffect(() => {\n        if (searching) {\n            setWorking(FILTERING);\n        } else {\n            setTimeout(() => setWorking(SPACE), 800);\n        }\n    }, [searching]);\n\n    return (\n        <div className={classes.root}>\n            <Typography align=\"right\">{working}</Typography>\n            <Typography align=\"right\">{count}</Typography>\n        </div>\n    );\n}\n\nexport default FilterStats;\n"],"sourceRoot":""}