{"version":3,"sources":["containers/ColorPicker/services.ts","containers/ColorPicker/styled.ts","containers/ColorPicker/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx"],"names":["retrieveClickedColor","event","image","coordinates","target","bounds","getBoundingClientRect","left","top","x","pageX","y","pageY","cw","clientWidth","ch","clientHeight","iw","naturalWidth","ih","naturalHeight","px","Math","round","py","width","height","computeImageClickCoordinates","canvas","document","createElement","context","getContext","drawImage","p","getImageData","data","r","g","b","Error","toString","rgbToHex","slice","imageResizer","marginTop","display","alignItems","justifyContent","border","useStyles","makeStyles","theme","root","margin","spacing","imageSelector","textAlign","toolbar","sample","paddingTop","marginBottom","borderColor","palette","text","disabled","borderStyle","borderWidth","borderRadius","shape","textShadow","ColorPicker","title","classes","React","useState","imgDataURL","setImgDataURL","background","setBackground","onPasteFromClipboard","e","items","onLoad","i","length","item","type","startsWith","reader","FileReader","onload","readAsDataURL","getAsFile","services","clipboardData","originalEvent","clipboard","ev","result","onImageClick","color","getElementById","useEffect","onpaste","removeEventListener","addEventListener","Helmet","className","FeatureTitle","iconType","PaletteIcon","Card","Box","Typography","accept","onChange","file","onFileSelected","files","id","style","htmlFor","Button","variant","component","defaultSize","src","alt","endIcon","onClick","preventDefault","CardContent","backgroundColor","onChangeComplete","hex","CopyButton","wordBreak","titleWithIcon","titleContainer","icon","marginRight","props","FeatureIcon","setToasterState","useToasterUpdate","feedback","substr","message","copy","format","open","autoHideDuration"],"mappings":"4RAuBO,SAASA,EAAqBC,EAAmBC,GACpD,IAAMC,EAiCH,SAAsCF,GACzC,IAAMC,EAAQD,EAAMG,OACdC,EAASH,EAAMI,wBAEfC,EAAOF,EAAOE,KACdC,EAAMH,EAAOG,IACbC,EAAIR,EAAMS,MAAQH,EAClBI,EAAIV,EAAMW,MAAQJ,EAClBK,EAAKX,EAAMY,YACXC,EAAKb,EAAMc,aACXC,EAAKf,EAAMgB,aACXC,EAAKjB,EAAMkB,cAEXC,EAAKC,KAAKC,MAAMd,EAAII,EAAKI,GACzBO,EAAKF,KAAKC,MAAMZ,EAAII,EAAKI,GAE/B,MAAO,CACHE,KACAG,KACAC,MAAOR,EACPS,OAAQP,GArDQQ,CAA6B1B,GAG3C2B,EAASC,SAASC,cAAc,UACtCF,EAAOH,MAAQtB,EAAYsB,MAC3BG,EAAOF,OAASvB,EAAYuB,OAC5B,IAAMK,EAAoCH,EAAOI,WAAW,MAC5DD,EAAQE,UAAU/B,EAAO,EAAG,GAG5B,IAAMgC,EAAIH,EAAQI,aAAahC,EAAYkB,GAAIlB,EAAYqB,GAAI,EAAG,GAAGY,KAGrE,MAFY,KAAO,SAKvB,SAAkBC,EAAWC,EAAWC,GACpC,GAAIF,EAAI,KAAOC,EAAI,KAAOC,EAAI,IAC1B,MAAM,IAAIC,MAAM,2BAGpB,OAASH,GAAK,GAAOC,GAAK,EAAKC,GAAGE,SAAS,IAVbC,CAASR,EAAE,GAAIA,EAAE,GAAIA,EAAE,KAAKS,OAAO,G,aCjCxDC,EAAe,CACxBC,UAAW,GACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,kBAGCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CAC5CC,KAAM,CACFC,OAAQF,EAAMG,QAAQ,IAE1BrD,MAAO,CACHuB,MAAO,OACP6B,OAAQ,EACRL,OAAQ,mBAEZO,cAAe,CACXF,OAAQF,EAAMG,QAAQ,GACtBE,UAAW,UAEfC,QAAS,CACLJ,OAAQF,EAAMG,QAAQ,IAE1BI,OAAQ,CACJlC,MAAO,MACPC,OAAQ,GACRkC,WAAY,GACZC,aAAc,GACdC,YAAaV,EAAMW,QAAQC,KAAKC,SAChCC,YAAa,QACbC,YAAa,EACbC,aAAchB,EAAMiB,MAAMD,aAC1BX,UAAW,SACXa,WAAY,yB,iBCqFLC,UAxGe,WAC1B,IAAMC,EAAQ,eACRC,EAAUvB,IAFgB,EAGIwB,IAAMC,SAAS,IAHnB,mBAGzBC,EAHyB,KAGbC,EAHa,OAIIH,IAAMC,SAAS,IAJnB,mBAIzBG,EAJyB,KAIbC,EAJa,KAYhC,SAASC,EAAqBC,IFtB3B,SAA4BC,EAA6BC,GAC5D,GAAKD,EAIL,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CACnC,IAAME,EAAyBJ,EAAME,GACrC,GAAIE,EAAKC,KAAKC,WAAW,SAAU,CAC/B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAASR,EAChBM,EAAOG,cAAcN,EAAKO,aAC1B,QEaJC,EADsBb,EAAEc,eAAiBd,EAAEe,cAAcD,eAAiBd,EAAEe,cAAcC,WAChDf,OACtC,SAACgB,GAAD,OAAmCrB,EAAcqB,EAAG9F,OAAQ+F,WAwBpE,SAASC,EAAanG,GAClB,IACMoG,EAAQP,EAA8B7F,EAD9B4B,SAASyE,eAAe,UAEtCvB,EAAcsB,GAGlB,OArBA3B,IAAM6B,WAAU,WAIZ,OAHA1E,SAAS2E,QAAUxB,EAGZ,WACHnD,SAAS4E,oBAAoB,UAAWzB,MAE7C,IAEHN,IAAM6B,WAAU,WACR3B,GACA/C,SAASyE,eAAe,SAAUI,iBAAiB,QAASN,KAEjE,CAACxB,IASA,qCACI,cAAC+B,EAAA,EAAD,CAAQnC,MAAOA,IACf,sBAAKoC,UAAWnC,EAAQpB,KAAxB,UACI,cAACwD,EAAA,EAAD,CAAcC,SAAUC,IAAavC,MAAOA,IAE5C,eAACwC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAKnE,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAS4D,UAAWnC,EAAQjB,cAAnF,WACMoB,GACE,gCACI,cAACsC,EAAA,EAAD,yCACA,cAACA,EAAA,EAAD,+BACA,uBAAO3B,KAAK,OAAOc,MAAM,UAAUc,OAAO,UACtCC,SAAU,SAACnC,GAAD,OAxC1C,SAAwBoC,GACpB,IAAM5B,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACO,GAAD,OAAmCrB,EAAcqB,EAAG9F,OAAQ+F,SAC5EV,EAAOG,cAAcyB,GAqC6BC,CAAerC,EAAE7E,OAAOmH,MAAM,KACpDC,GAAG,mBAAmBC,MAAO,CAAE3E,QAAS,UAE5C,uBAAO4E,QAAQ,mBAAf,SACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,UAAU,OAAOxB,MAAM,UAAnD,SACI,cAAC,IAAD,WAKfzB,GACG,cAAC,IAAD,CAAW6C,MAAO7E,EAAckF,YAAa,CAAErG,MAAO,IAAKC,OAAQ,QAAnE,SACI,qBAAK8F,GAAG,QAAQO,IAAKnD,EAAYoD,IAAI,oBAAoBpB,UAAWnC,EAAQvE,aAKvF0E,GACG,cAACqC,EAAA,EAAD,CAAKnE,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAvD,SACI,cAAC2E,EAAA,EAAD,CAAQM,QAAS,cAAC,IAAD,IAAgBL,QAAQ,YAAYvB,MAAM,UAAU6B,QAvE7F,SAAqBjI,GACjBA,EAAMkI,iBACNtD,EAAc,IACdE,EAAc,KAoEM,qBAIR,eAACqD,EAAA,EAAD,WAEI,cAACnB,EAAA,EAAD,CAAKnE,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAvD,SACI,qBAAK4D,UAAWnC,EAAQd,OAAQ8D,MAAO,CAAEY,gBAAiBvD,GAA1D,SACKA,MAIT,cAACmC,EAAA,EAAD,CAAKnE,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAvD,SACI,cAAC,IAAD,CAAcqD,MAAOvB,EACjBwD,iBAAkB,SAACjC,GAAD,OAAwBtB,EAAcsB,EAAMkC,UAGtE,cAACtB,EAAA,EAAD,CAAKnE,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAS4D,UAAWnC,EAAQf,QAAnF,SACI,cAAC8E,EAAA,EAAD,CAAYpG,KAAM0C,oB,6DC3GxC5B,G,KAAYC,aAAW,SAACC,GAAD,MAAY,CACrCoB,MAAO,CACHiE,UAAW,cAEfC,cAAe,CACX5F,QAAS,OACTC,WAAY,UAEhB4F,eAAgB,CACZ7F,QAAS,OACTE,eAAgB,UAEpB4F,KAAM,CACFlH,OAAQ,OACRD,MAAO,OACPoH,YAAazF,EAAMG,QAAQ,SAyBpBsD,IAhBuB,SAACiC,GACnC,IAAMrE,EAAUvB,IACV6F,EAAcD,EAAMhC,SAE1B,OACI,qBAAKF,UAAWnC,EAAQkE,eAAxB,SACI,sBAAK/B,UAAWnC,EAAQiE,cAAxB,UACI,cAACK,EAAD,CAAanC,UAAWnC,EAAQmE,OAChC,cAAC,IAAD,CAAYhB,QAAQ,KAAKhB,UAAWnC,EAAQD,MAA5C,SACKsE,EAAMtE,e,wGCJZgE,IAvBqB,SAACM,GAAkB,IAC3C1G,EAAS0G,EAAT1G,KACA4G,EAAoBC,cAApBD,gBAcR,OACI,cAAC,IAAD,CAAQf,QAAS,cAAC,IAAD,mBACbC,QAdW,WACf,GAAK9F,EAAL,CAIA,IAAM8G,EAAW9G,EAAK+G,OAAO,EAAG,IAC1BC,EAAO,yCAAqCF,EAArC,WAEbG,IAAajH,EAAM,CAAEkH,OAAQ,eAC7BN,EAAgB,CAAEO,MAAM,EAAMH,UAAS7D,KAAM,UAAWiE,iBAAkB,QAKjDvF,UAAW7B,EAChCwF,QAAQ,YAAYvB,MAAM,UAF9B","file":"static/js/27.08400a5b.chunk.js","sourcesContent":["interface ClickCoordinates {\n    px: number;\n    py: number;\n    width: number;\n    height: number;\n}\n\nexport function clipboardToDataURL(items: DataTransferItemList, onLoad: (ev: ProgressEvent<FileReader>) => void): void {\n    if (!items) {\n        return;\n    }\n\n    for (let i = 0; i < items.length; i++) {\n        const item: DataTransferItem = items[i];\n        if (item.type.startsWith('image')) {\n            const reader = new FileReader();\n            reader.onload = onLoad;\n            reader.readAsDataURL(item.getAsFile() as Blob);\n            break;\n        }\n    }\n}\n\nexport function retrieveClickedColor(event: MouseEvent, image: HTMLImageElement): string {\n    const coordinates = computeImageClickCoordinates(event);\n\n    // Create a canvas with same image dimension and draw the image on it\n    const canvas = document.createElement('canvas') as HTMLCanvasElement;\n    canvas.width = coordinates.width;\n    canvas.height = coordinates.height;\n    const context: CanvasRenderingContext2D = canvas.getContext('2d')!;\n    context.drawImage(image, 0, 0);\n\n    // Get the clicked pixel info\n    const p = context.getImageData(coordinates.px, coordinates.py, 1, 1).data;\n    const hex = '#' + ('000000' + rgbToHex(p[0], p[1], p[2])).slice(-6);\n\n    return hex;\n}\n\nfunction rgbToHex(r: number, g: number, b: number): string {\n    if (r > 255 || g > 255 || b > 255) {\n        throw new Error('Invalid color component');\n    }\n\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\n\n/**\n * Compute clicked pixel coordinates based on natural image size\n * \n * @see https://stackoverflow.com/questions/34867066/javascript-mouse-click-coordinates-for-image\n * @see https://stackoverflow.com/a/288731/1497139\n *\n * @param event {MouseEvent}\n */\nexport function computeImageClickCoordinates(event: MouseEvent): ClickCoordinates {\n    const image = event.target as HTMLImageElement;\n    const bounds = image.getBoundingClientRect();\n\n    const left = bounds.left;\n    const top = bounds.top;\n    const x = event.pageX - left;\n    const y = event.pageY - top;\n    const cw = image.clientWidth;\n    const ch = image.clientHeight;\n    const iw = image.naturalWidth;\n    const ih = image.naturalHeight;\n\n    const px = Math.round(x / cw * iw);\n    const py = Math.round(y / ch * ih);\n\n    return {\n        px,\n        py,\n        width: iw,\n        height: ih\n    };\n}\n","import { makeStyles } from '@material-ui/core';\n\nexport const imageResizer = {\n    marginTop: 10,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 'solid 1px blue'\n};\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    image: {\n        width: '100%',\n        margin: 5,\n        border: 'dashed 1px grey'\n    },\n    imageSelector: {\n        margin: theme.spacing(2),\n        textAlign: 'center',\n    },\n    toolbar: {\n        margin: theme.spacing(2),\n    },\n    sample: {\n        width: '80%',\n        height: 40,\n        paddingTop: 10,\n        marginBottom: 20,\n        borderColor: theme.palette.text.disabled,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        borderRadius: theme.shape.borderRadius,\n        textAlign: 'center',\n        textShadow: '1px 1px lightgrey',\n    },\n}));\n","import React from 'react';\n\nimport { Box, Card, CardContent, Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport PaletteIcon from '@material-ui/icons/Palette';\nimport PhotoCameraIcon from '@material-ui/icons/PhotoCamera';\n\nimport { Resizable } from \"re-resizable\";\nimport { ColorResult, SketchPicker } from 'react-color';\n\nimport FeatureTitle from '../../components/FeatureTitle';\nimport * as services from './services';\nimport { useStyles, imageResizer } from './styled';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\n\nconst ColorPicker: React.FC = () => {\n    const title = 'Color picker';\n    const classes = useStyles();\n    const [imgDataURL, setImgDataURL] = React.useState('');\n    const [background, setBackground] = React.useState('');\n\n    function handleClear(event: any) {\n        event.preventDefault();\n        setImgDataURL('');\n        setBackground('');\n    }\n\n    function onPasteFromClipboard(e: any) {\n        const clipboardData = e.clipboardData || e.originalEvent.clipboardData || e.originalEvent.clipboard;\n        services.clipboardToDataURL(clipboardData.items,\n            (ev: ProgressEvent<FileReader>) => setImgDataURL(ev.target!.result as string));\n    }\n\n    function onFileSelected(file: File) {\n        const reader = new FileReader();\n        reader.onload = (ev: ProgressEvent<FileReader>) => setImgDataURL(ev.target!.result as string);\n        reader.readAsDataURL(file);\n    }\n\n    React.useEffect(() => {\n        document.onpaste = onPasteFromClipboard;\n\n        // Unmount cleanup\n        return () => {\n            document.removeEventListener('onpaste', onPasteFromClipboard);\n        };\n    }, []);\n\n    React.useEffect(() => {\n        if (imgDataURL) {\n            document.getElementById('image')!.addEventListener('click', onImageClick);\n        }\n    }, [imgDataURL]);\n\n    function onImageClick(event: MouseEvent) {\n        const image = document.getElementById('image')! as HTMLImageElement;\n        const color = services.retrieveClickedColor(event, image);\n        setBackground(color);\n    }\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={PaletteIcon} title={title} />\n\n                <Card>\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" className={classes.imageSelector}>\n                        {!imgDataURL && (\n                            <div>\n                                <Typography>paste image from clipboard</Typography>\n                                <Typography>or select a file</Typography>\n                                <input type=\"file\" color=\"primary\" accept=\"image/*\"\n                                    onChange={(e: any) => onFileSelected(e.target.files[0])}\n                                    id=\"icon-button-file\" style={{ display: 'none', }}\n                                />\n                                <label htmlFor=\"icon-button-file\">\n                                    <Button variant=\"contained\" component=\"span\" color=\"primary\">\n                                        <PhotoCameraIcon />\n                                    </Button>\n                                </label>\n                            </div>\n                        )}\n                        {imgDataURL && (\n                            <Resizable style={imageResizer} defaultSize={{ width: 300, height: '100%' }}>\n                                <img id=\"image\" src={imgDataURL} alt=\"Clipboard content\" className={classes.image} />\n                            </Resizable>\n                        )}\n                    </Box>\n\n                    {imgDataURL && (\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                            <Button endIcon={<DeleteIcon />} variant=\"contained\" color=\"primary\" onClick={handleClear}>Clear</Button>\n                        </Box>\n                    )}\n\n                    <CardContent>\n\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                            <div className={classes.sample} style={{ backgroundColor: background }}>\n                                {background}\n                            </div>\n                        </Box>\n\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                            <SketchPicker color={background}\n                                onChangeComplete={(color: ColorResult) => setBackground(color.hex)} />\n                        </Box>\n\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" className={classes.toolbar}>\n                            <CopyButton data={background} />\n                        </Box>\n                    </CardContent>\n                </Card>\n            </div>\n        </>\n    );\n}\n\nexport default ColorPicker;\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n}\n\nexport default FeatureTitle;\n","import React from 'react';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport { Button } from '@material-ui/core';\n\nimport * as copy from 'copy-to-clipboard';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n}\n\nconst CopyButton: React.FC<Props> = (props: Props) => {\n    const { data } = props;\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const feedback = data.substr(0, 20);\n        const message = `Content copied into clipboard: ${feedback} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    }\n\n    return (\n        <Button endIcon={<AssignmentTurnedIn>Copy</AssignmentTurnedIn>}\n            onClick={handleCopy} disabled={!data}\n            variant=\"contained\" color=\"primary\">Copy</Button>\n    );\n}\n\nexport default CopyButton;\n"],"sourceRoot":""}