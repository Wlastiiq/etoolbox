{"version":3,"sources":["containers/QRCodeGenerator/index.tsx","containers/QRCodeGenerator/services.ts","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx"],"names":["useStyles","makeStyles","theme","root","margin","spacing","doc","toolbar","padding","marginLeft","DEFAULT_OPTIONS","errorCorrectionLevel","type","width","quality","color","dark","light","mapStateToProps","state","inputText","textInputs","inputOptions","mapDispatchToProps","dispatch","storeInputText","name","value","setTextAction","connect","withWidth","props","title","classes","React","useState","imgDataURL","setImgDataURL","Helmet","className","FeatureTitle","iconType","SelectAllIcon","Typography","align","target","rel","href","noValidate","autoComplete","Grid","container","item","md","sm","xs","TextField","autoFocus","isWidthUp","label","placeholder","multiline","rows","variant","fullWidth","onChange","e","Toolbar","Box","display","flexGrow","CopyButton","data","Button","onClick","opts","JSON","parse","QRCode","toDataURL","err","url","options","stringify","console","error","services","disabled","endIcon","Card","alignItems","justifyContent","src","alt","CardContent","wordBreak","titleWithIcon","titleContainer","icon","height","marginRight","FeatureIcon","setToasterState","useToasterUpdate","feedback","substr","message","copy","format","open","autoHideDuration"],"mappings":"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","file":"static/js/27.6fded32f.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport QRCode from 'qrcode';\n\nimport { Box, Button, Card, CardContent, Grid, TextField, Toolbar, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport SelectAllIcon from '@material-ui/icons/SelectAll';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\n\nimport * as services from './services';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    doc: {\n        margin: theme.spacing(2),\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n}));\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    inputOptions?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst DEFAULT_OPTIONS = {\n    errorCorrectionLevel: 'H',\n    type: 'image/png',\n    width: 200,\n    quality: 0.3,\n    margin: 1,\n    color: {\n        dark: '#000000FF',\n        light: '#FFFFFFFF'\n    }\n};\n\n\nconst QRCodeGenerator: React.FC<Props> = (props: Props) => {\n    const title = 'QR Code generator';\n    const classes = useStyles();\n    const { inputText, inputOptions, storeInputText } = props;\n    const [imgDataURL, setImgDataURL] = React.useState('');\n\n    function generate() {\n        if (!inputText) {\n            return;\n        }\n\n        const opts = inputOptions ? JSON.parse(inputOptions) : DEFAULT_OPTIONS;\n        QRCode.toDataURL(inputText, opts, (err, url) => {\n            if (err) {\n                throw err;\n            }\n\n            setImgDataURL(url);\n            storeInputText('lastQRCodeOptions', services.jsonFormat(JSON.stringify(opts)));\n        })\n    }\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={SelectAllIcon} title={title} />\n\n                <Typography align=\"center\" className={classes.doc}>\n                    <a target=\"_blank\" rel='noreferrer' href=\"https://www.npmjs.com/package/qrcode#qr-code-options\">\n                        Generation options documentation available here!\n                </a>\n                </Typography>\n\n                <form noValidate autoComplete=\"off\">\n                    <Grid container spacing={1}>\n                        <Grid item md={6} sm={12} xs={12}>\n                            <TextField\n                                autoFocus={isWidthUp('md', props.width)}\n                                label=\"Text to store into QR Code\"\n                                placeholder=\"Paste or type the content here\"\n                                multiline\n                                rows={10}\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                fullWidth={true}\n                                value={inputText}\n                                onChange={(e) => storeInputText('lastQRCodeTextValue', e.target.value)}\n                            />\n                        </Grid>\n                        <Grid item md={6} sm={12} xs={12}>\n                            <TextField\n                                label=\"QR Code generation options\"\n                                multiline\n                                rows={10}\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                fullWidth={true}\n                                value={inputOptions}\n                                onChange={(e) => storeInputText('lastQRCodeOptions', e.target.value)}\n                            />\n                        </Grid>\n                    </Grid>\n                </form>\n\n                <Toolbar className={classes.toolbar}>\n                    <Box display='flex' flexGrow={1}></Box>\n                    <CopyButton data={imgDataURL} />\n                    <Button variant=\"contained\" color=\"primary\"\n                        onClick={generate} disabled={!inputText}\n                        endIcon={<SelectAllIcon />}>Generate</Button>\n                </Toolbar>\n\n                {imgDataURL && (<Card>\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                        <img src={imgDataURL} alt=\"QR Code\" />\n                    </Box>\n                    <CardContent>\n                        <TextField\n                            label=\"Full img tag\"\n                            fullWidth\n                            value={`<img alt=\"QR Code\" src=\"${imgDataURL}\"/>`}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            label=\"QR Code. Copy-paste into 'src' attribute\"\n                            fullWidth\n                            value={imgDataURL}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            multiline\n                            rows=\"8\"\n                        />\n                    </CardContent>\n                </Card>)}\n            </div>\n        </>\n    );\n}\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastQRCodeTextValue'],\n        inputOptions: state.textInputs['lastQRCodeOptions']\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(QRCodeGenerator));\n","export function jsonFormat(value: string | undefined): string {\n    if (!value) {\n        return '{}';\n    }\n\n    try {\n        const options = JSON.parse(value);\n        return JSON.stringify(options, null, 2);\n    } catch (e) {\n        console.error(e, value);\n        return '{}';\n    }\n}\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n}\n\nexport default FeatureTitle;\n","import React from 'react';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport { Button } from '@material-ui/core';\n\nimport * as copy from 'copy-to-clipboard';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n}\n\nconst CopyButton: React.FC<Props> = (props: Props) => {\n    const { data } = props;\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const feedback = data.substr(0, 20);\n        const message = `Content copied into clipboard: ${feedback} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    }\n\n    return (\n        <Button endIcon={<AssignmentTurnedIn>Copy</AssignmentTurnedIn>}\n            onClick={handleCopy} disabled={!data}\n            variant=\"contained\" color=\"primary\">Copy</Button>\n    );\n}\n\nexport default CopyButton;\n"],"sourceRoot":""}