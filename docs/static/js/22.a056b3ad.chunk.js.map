{"version":3,"sources":["containers/Base64ImageEncoder/services.ts","containers/Base64ImageEncoder/styled.ts","containers/Base64ImageEncoder/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/Spinner/Spinner.tsx"],"names":["MAX_FILE_SIZE_BYTES","imageResizer","marginTop","display","alignItems","justifyContent","border","useStyles","makeStyles","theme","root","margin","spacing","flexGrow","header","padding","dropzone","flex","cursor","flexDirection","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","image","width","toolbar","marginLeft","Base64ImageEncoder","title","classes","useState","encodedFiles","setEncodedFiles","errors","setErrors","onDrop","useCallback","acceptedFiles","rejectedFiles","map","rejection","name","file","size","error","prettyBytes","forEach","Promise","resolve","reject","reader","FileReader","base","addEventListener","e","encoded","result","readAsDataURL","loadFile","then","encFile","list","catch","useDropzone","accept","maxSize","multiple","getRootProps","getInputProps","processing","length","Helmet","className","FeatureTitle","iconType","PanoramaIcon","Spinner","active","errFile","idx","Typography","variant","Card","Box","style","defaultSize","height","src","alt","CardContent","gutterBottom","align","component","TextField","label","fullWidth","value","multiline","rows","Toolbar","CopyButton","data","wordBreak","titleWithIcon","titleContainer","icon","marginRight","props","FeatureIcon","setToasterState","useToasterUpdate","endIcon","onClick","feedback","substr","message","copy","format","open","type","autoHideDuration","disabled","background","classNamePrefix","spinner","children"],"mappings":"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","file":"static/js/22.a056b3ad.chunk.js","sourcesContent":["import { FileRejection } from 'react-dropzone';\nimport prettyBytes from 'pretty-bytes';\n\nexport interface EncodedFile {\n    name: string;\n    size: number;\n    encoded: string;\n}\n\nexport interface ErrorFile {\n    name: string;\n    size: number;\n    error: string;\n}\n\nexport const MAX_FILE_SIZE_BYTES = 250000;\n\nexport function loadFile(file: File): Promise<EncodedFile> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        const base = {\n            name: file.name,\n            size: file.size,\n        }\n\n        reader.addEventListener('abort', e => reject(`File upload aborted: ${e}`));\n        reader.addEventListener('error', e => reject(`File upload error: ${e}`));\n        reader.addEventListener('load', () => resolve({\n            ...base,\n            encoded: reader.result as string\n        }), false);\n\n        reader.readAsDataURL(file);\n    });\n}\n\nexport function rejectFiles(fileRejections: FileRejection[]): ErrorFile[] {\n    return fileRejections.map(rejection => ({\n        name: rejection.file.name,\n        size: rejection.file.size,\n        error: `Exceeds size limit: ${prettyBytes(MAX_FILE_SIZE_BYTES)}`\n    }));\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nexport const imageResizer = {\n    marginTop: 10,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 'solid 1px blue'\n};\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n        flexGrow: 1,\n    },\n    header: {\n        padding: '20px 0'\n    },\n    dropzone: {\n        flex: '1',\n        cursor: 'pointer',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        padding: '20px',\n        borderWidth: '2px',\n        borderRadius: '2px',\n        borderColor: '#eeeeee',\n        borderStyle: 'dashed',\n        backgroundColor: '#fafafa',\n        color: '#bdbdbd',\n        outline: 'none',\n        transition: 'border .24s ease-in-out'\n    },\n    image: {\n        width: '100%',\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n}));\n","import React, { useCallback, useState } from 'react';\nimport { FileRejection, useDropzone } from 'react-dropzone';\n\nimport { Box, Card, CardContent, TextField, Toolbar, Typography } from '@material-ui/core';\nimport PanoramaIcon from '@material-ui/icons/Panorama';\nimport prettyBytes from 'pretty-bytes';\nimport { Resizable } from 're-resizable';\n\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { EncodedFile, ErrorFile, loadFile, MAX_FILE_SIZE_BYTES, rejectFiles } from './services';\nimport { imageResizer, useStyles } from './styled';\nimport { Helmet } from 'react-helmet';\n\nconst Base64ImageEncoder: React.FC = () => {\n    const title = 'Base64 image encoder';\n    const classes = useStyles();\n    const [encodedFiles, setEncodedFiles] = useState<EncodedFile[]>([]);\n    const [errors, setErrors] = useState<ErrorFile[]>([]);\n\n    const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: FileRejection[]) => {\n        setErrors(rejectFiles(rejectedFiles)); // set/reset errors\n        setEncodedFiles([]); // reset UI\n\n        acceptedFiles.forEach((file: File) =>\n            loadFile(file)\n                .then(encFile => setEncodedFiles(list => [...list, encFile]))\n                .catch(error => setErrors(list => [...list, {\n                    name: file.name,\n                    size: file.size,\n                    error\n                }]))\n        );\n    }, []);\n\n    const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\n        accept: ['image/jpeg', 'image/png', 'image/gif', 'image/*'],\n        maxSize: MAX_FILE_SIZE_BYTES,\n        multiple: true,\n        onDrop\n    });\n\n    const processing = acceptedFiles.length !== encodedFiles.length;\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={PanoramaIcon} title={title} />\n\n                <Spinner active={processing}>\n                    <div {...getRootProps({ className: classes.dropzone })}>\n                        <input {...getInputProps()} />\n                        <p>Drag 'n' drop some files here, or click to select files</p>\n                    </div>\n                </Spinner>\n                <div>\n                    {errors && errors.map((errFile: ErrorFile, idx: number) => {\n                        const size = prettyBytes(errFile.size);\n                        return (\n                            <div key={idx}>\n                                <Typography variant=\"body1\">\n                                    <strong>{errFile.name}</strong> ({size} bytes): {errFile.error}\n                                </Typography>\n                            </div>\n                        )\n                    })}\n                </div>\n                <div>\n                    {processing &&\n                        <Typography color=\"secondary\" variant=\"h5\">\n                            Processing {acceptedFiles.length - encodedFiles.length} file(s)\n                    </Typography>\n                    }\n                </div>\n\n                {encodedFiles.map((file: EncodedFile, idx: number) => (\n                    <div key={idx}>\n                        <Card>\n                            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                                <Resizable style={imageResizer} defaultSize={{ width: 300, height: '100%' }}>\n                                    <img src={file.encoded} alt={file.name} className={classes.image} />\n                                </Resizable>\n                            </Box>\n                            <CardContent>\n                                <Typography gutterBottom align=\"center\" variant=\"h5\" component=\"h2\">\n                                    <b>{file.name}</b> ({file.size} bytes)\n                            </Typography>\n                                <TextField\n                                    label=\"Full img tag\"\n                                    fullWidth\n                                    value={`<img alt=\"${file.name}\" src=\"${file.encoded}\"/>`}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                />\n                                <TextField\n                                    label=\"Base64 encoded. Copy-paste into 'src' attribute\"\n                                    fullWidth\n                                    value={file.encoded}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    multiline\n                                    rows=\"8\"\n                                />\n                                <Toolbar className={classes.toolbar}>\n                                    <Box display='flex' flexGrow={1}></Box>\n                                    <CopyButton data={file.encoded} />\n                                </Toolbar>\n                            </CardContent>\n                        </Card>\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n}\n\nexport default Base64ImageEncoder;\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n}\n\nexport default FeatureTitle;\n","import React from 'react';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport { Button } from '@material-ui/core';\n\nimport * as copy from 'copy-to-clipboard';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n}\n\nconst CopyButton: React.FC<Props> = (props: Props) => {\n    const { data } = props;\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const feedback = data.substr(0, 20);\n        const message = `Content copied into clipboard: ${feedback} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    }\n\n    return (\n        <Button endIcon={<AssignmentTurnedIn>Copy</AssignmentTurnedIn>}\n            onClick={handleCopy} disabled={!data}\n            variant=\"contained\" color=\"primary\">Copy</Button>\n    );\n}\n\nexport default CopyButton;\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport LoadingOverlay from 'react-loading-overlay';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .spinner_overlay': {\n            background: 'rgba(0, 0, 0, 0.3)',\n        },\n    },\n}));\n\ninterface Props {\n    active: boolean;\n    children: any;\n}\n\nexport const Spinner: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n\n    return (\n        <LoadingOverlay classNamePrefix='spinner_' className={classes.root}\n            active={props.active} spinner={<ScaleLoader color=\"#bf3a2b\" />}>\n            {props.children}\n        </LoadingOverlay>\n    );\n}\n"],"sourceRoot":""}