{"version":3,"sources":["containers/UUIDGenerator/services.ts","containers/UUIDGenerator/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/ResultMonospace/index.tsx"],"names":["GENERATORS_MAP","Map","generate","version","quantity","uuidGenerator","get","result","i","slice","set","v1","v4","useStyles","makeStyles","theme","root","margin","spacing","form","marginTop","formControl","toolbar","marginLeft","withWidth","props","title","classes","useForm","handleSubmit","errors","control","React","useState","services","generated","setGenerated","Helmet","className","FeatureTitle","iconType","SimCardIcon","Grid","container","item","md","sm","xs","FormControl","InputLabel","id","name","defaultValue","as","Select","labelId","autoFocus","isWidthUp","width","MenuItem","value","rules","required","valueAsNumber","min","max","FormHelperText","TextField","label","error","type","helperText","justify","CopyButton","data","Button","variant","color","onClick","endIcon","ResultMonospace","wordBreak","titleWithIcon","display","alignItems","titleContainer","justifyContent","icon","height","marginRight","FeatureIcon","setToasterState","useToasterUpdate","feedback","substr","message","copy","format","open","autoHideDuration","disabled","fontFamily","rows","multiline","fullWidth","InputProps","input"],"mappings":"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","file":"static/js/24.73cf999c.chunk.js","sourcesContent":["import { v1, v4 } from 'uuid';\n\nconst GENERATORS_MAP = new Map<Number, Function>();\nGENERATORS_MAP.set(1, v1);\nGENERATORS_MAP.set(4, v4);\n\nexport function generate(version: number, quantity: number): string {\n    const uuidGenerator = GENERATORS_MAP.get(version)!;\n\n    let result = '';\n    for (let i = 0; i < quantity; i++) {\n        result += `${uuidGenerator()}\\n`;\n    }\n\n    // Return result without last line feed\n    return result.slice(0, -1);\n}\n","import React from 'react';\n\nimport { useForm, Controller } from 'react-hook-form';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport { FormControl, FormHelperText, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SimCardIcon from '@material-ui/icons/SimCard';\n\nimport FeatureTitle from '../../components/FeatureTitle';\nimport * as services from './services';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\nimport ResultMonospace from '../../components/ResultMonospace';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    form: {\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        '& > *': {\n            marginLeft: theme.spacing(1),\n            marginTop: theme.spacing(1),\n        },\n    },\n}));\n\ninterface UUIDForm {\n    version: number;\n    quantity: number;\n}\n\ninterface Props {\n    width: Breakpoint;\n}\n\nconst UUIDGenerator: React.FC<Props> = (props: Props) => {\n    const title = 'UUID Generator';\n    const classes = useStyles();\n    const { handleSubmit, errors, control } = useForm();\n    const [generated, setGenerated] = React.useState(services.generate(4, 1));\n\n    const onSubmit = (data: UUIDForm) => {\n        setGenerated(services.generate(data.version, data.quantity));\n    };\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={SimCardIcon} title={title} />\n\n                <div className={classes.form}>\n                    <Grid container spacing={1}>\n                        <Grid item md={2} sm={3} xs={6}>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel id=\"uuidVersionLabel\">Version</InputLabel>\n                                <Controller\n                                    control={control}\n                                    name=\"version\"\n                                    defaultValue=\"4\"\n                                    as={\n                                        <Select labelId=\"uuidVersionLabel\" autoFocus={isWidthUp('md', props.width)}>\n                                            <MenuItem value={1}>1</MenuItem>\n                                            <MenuItem value={4}>4</MenuItem>\n                                        </Select>\n                                    }\n                                    rules={{\n                                        required: true,\n                                        valueAsNumber: true,\n                                        min: 1,\n                                        max: 5,\n                                    }}\n                                />\n                                <FormHelperText>RFC4122 version</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={2} sm={3} xs={6}>\n                            <FormControl className={classes.formControl}>\n                                <Controller\n                                    name=\"quantity\"\n                                    as={\n                                        <TextField label=\"Quantity\" error={!!errors.quantity} type=\"number\"\n                                            helperText={errors.quantity ? 'valid range: [1..9999]' : null} />\n                                    }\n                                    control={control}\n                                    defaultValue=\"5\"\n                                    rules={{\n                                        required: true,\n                                        valueAsNumber: true,\n                                        min: 1,\n                                        max: 9999,\n                                    }}\n                                />\n                                <FormHelperText>Number of UUIDs</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={8} sm={6} xs={12}>\n                            <Grid container justify=\"flex-end\" className={classes.toolbar}>\n                                <CopyButton data={generated} />\n                                <Button variant=\"contained\" color=\"primary\"\n                                    onClick={handleSubmit(onSubmit)}\n                                    endIcon={<SimCardIcon />}>Generate</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n\n                <ResultMonospace label=\"Result\" result={generated} />\n            </div>\n        </>\n    );\n}\n\nexport default withWidth()(UUIDGenerator);\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n}\n\nexport default FeatureTitle;\n","import React from 'react';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport { Button } from '@material-ui/core';\n\nimport * as copy from 'copy-to-clipboard';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n}\n\nconst CopyButton: React.FC<Props> = (props: Props) => {\n    const { data } = props;\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const feedback = data.substr(0, 20);\n        const message = `Content copied into clipboard: ${feedback} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    }\n\n    return (\n        <Button endIcon={<AssignmentTurnedIn>Copy</AssignmentTurnedIn>}\n            onClick={handleCopy} disabled={!data}\n            variant=\"contained\" color=\"primary\">Copy</Button>\n    );\n}\n\nexport default CopyButton;\n","import { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    result: {\n        fontFamily: 'monospace',\n        height: 'auto',\n    },\n}));\n\ninterface Props {\n    label?: string;\n    result?: string;\n    rows?: number;\n}\n\nexport const ResultMonospace = ({ label, result, rows = 10 }: Props) => {\n    const classes = useStyles();\n\n    return (\n        <TextField\n            multiline\n            rows={rows}\n            label={label}\n            variant='outlined'\n            margin='normal'\n            fullWidth={true}\n            value={result}\n            InputProps={{\n                classes: {\n                    input: classes.result,\n                },\n            }}\n        />\n    );\n};\n\nexport default ResultMonospace;\n"],"sourceRoot":""}